This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/*.log, tmp/, .js, .html, .blade.php, .css, public/, vendor/, node_modules
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    bug.yml
    config.yaml
  workflows/
    dependabot-auto-merge.yml
    fix-php-code-styling.yml
    tests.yml
  CONTRIBUTING.md
  dependabot.yml
  FUNDING.yml
  SECURITY.md
config/
  filament-saas-panel.php
database/
  migrations/
    2024_07_15_150609_create_personal_access_tokens_table.php
    2024_10_28_143941_add_media_if_not_exists_table copy.php
    2025_08_25_143941_add_otp_fields_if_not_exists_table.php
publish/
  migrations/
    create_team_invitations_table.php
    create_team_user_table.php
    create_teams_table.php
  Account.php
  Membership.php
  Team.php
  TeamInvitation.php
resources/
  lang/
    ar/
      messages.php
    en/
      messages.php
  views/
    emails/
      team-invitation.blade.php
    forms/
      components/
        browser-sessions.blade.php
        delete-account-description.blade.php
        delete-team-description.blade.php
        team-members.blade.php
        team-owner.blade.php
    livewire/
      contact-us.blade.php
      otp.blade.php
      sanctum-tokens.blade.php
    teams/
      api-tokens.blade.php
      edit-profile.blade.php
      edit-team.blade.php
routes/
  web.php
src/
  Actions/
    Fortify/
      CreateNewUser.php
      PasswordValidationRules.php
      ResetUserPassword.php
      UpdateUserPassword.php
      UpdateUserProfileInformation.php
    Jetstream/
      AddTeamMember.php
      CreateTeam.php
      DeleteTeam.php
      DeleteUser.php
      InviteTeamMember.php
      RemoveTeamMember.php
      UpdateTeamName.php
  Console/
    FilamentSaasPanelInstall.php
  Events/
    AccountLogged.php
    AccountOTPCheck.php
    AccountRegistered.php
    SendOTP.php
    SendWelcome.php
  Filament/
    Forms/
      BrowserSessionsForm.php
      DeleteAccountForm.php
      DeleteTeamForm.php
      EditPasswordForm.php
      EditProfileForm.php
      ManageTeamMembersForm.php
      UpdateTeamForm.php
    Pages/
      Auth/
        LoginAccount.php
        RegisterAccount.php
        RegisterAccountWithoutOTP.php
      EditProfile/
        HasBrowserSessions.php
        HasDeleteAccount.php
        HasEditPassword.php
        HasEditProfile.php
        HasNotification.php
      EditTeam/
        HasCancelTeamInvitation.php
        HasDeleteTeam.php
        HasEditTeam.php
        HasLeavingTeam.php
        HasManageRoles.php
        HasManageTeamMembers.php
        HasNotifications.php
        HasTeamInvitation.php
      ApiTokens.php
      CreateTeam.php
      EditProfile.php
      EditTeam.php
    Resources/
      TeamResource/
        Actions/
          TeamBulkAction.php
          TeamTableAction.php
        Filters/
          TeamFilter.php
        Form/
          TeamComponent.php
        Pages/
          ListTeams.php
        Table/
          TeamColumn.php
      TeamResource.php
  Http/
    Controllers/
      TeamsController.php
  Listeners/
    CreatePersonalTeam.php
    SwitchTeam.php
  Livewire/
    Otp.php
    SanctumTokens.php
  Mail/
    TeamInvitation.php
  Models/
    Membership.php
    Team.php
    TeamInvitation.php
  Responses/
    RegisterResponse.php
  Traits/
    InteractsWithTenant.php
  FilamentSaasPanelPlugin.php
  FilamentSaasPanelServiceProvider.php
  FilamentSaasTeamsPlugin.php
tests/
  database/
    factories/
      TeamFactory.php
      UserFactory.php
    migrations/
      2024_07_15_150609_create_personal_access_tokens_table.php
      2024_10_28_143941_add_media_if_not_exists_table.php
      2024_11_04_112951_create_teams_table.php
      2024_11_04_112952_create_team_invitations_table.php
      2024_11_04_112953_create_team_user_table.php
      2025_08_25_143941_add_otp_fields_if_not_exists_table.php
  src/
    Models/
      Membership.php
      Team.php
      TeamInvitation.php
      User.php
    AdminPanelProvider.php
    AppPanelProvider.php
    DebugTest.php
    PluginTest.php
    TestAPIKeysPage.php
    TestCase.php
    TestCreateTeamPage.php
    TestEditProfilePage.php
    TestEditTeamPage.php
    TestLoginPage.php
    TestRegisterPage.php
    TestTeamsResource.php
  Pest.php
.gitignore
CHANGELOG.md
CODE_OF_CONDUCT.md
composer.json
fadymondy-tomato-saas-panel.md
LICENSE.md
module.json
phpunit.xml
README.md
SECURITY.md
testbench.yaml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/ISSUE_TEMPLATE/bug.yml">
name: Bug Report
description: Report an Issue or Bug with the Package
title: "[Bug]: "
labels: ["bug"]
body:
  - type: markdown
    attributes:
      value: |
        We're sorry to hear you have a problem. Can you help us solve it by providing the following details.
  - type: textarea
    id: what-happened
    attributes:
      label: What happened?
      description: What did you expect to happen?
      placeholder: I cannot currently do X thing because when I do, it breaks X thing.
    validations:
      required: true
  - type: textarea
    id: how-to-reproduce
    attributes:
      label: How to reproduce the bug
      description: How did this occur, please add any config values used and provide a set of reliable steps if possible.
      placeholder: When I do X I see Y.
    validations:
      required: true
  - type: input
    id: package-version
    attributes:
      label: Package Version
      description: What version of our Package are you running? Please be as specific as possible
      placeholder: 2.0.0
    validations:
      required: true
  - type: input
    id: php-version
    attributes:
      label: PHP Version
      description: What version of PHP are you running? Please be as specific as possible
      placeholder: 8.2.0
    validations:
      required: true
  - type: input
    id: laravel-version
    attributes:
      label: Laravel Version
      description: What version of Laravel are you running? Please be as specific as possible
      placeholder: 9.0.0
    validations:
      required: true
  - type: dropdown
    id: operating-systems
    attributes:
      label: Which operating systems does with happen with?
      description: You may select more than one.
      multiple: true
      options:
        - macOS
        - Windows
        - Linux
  - type: textarea
    id: notes
    attributes:
      label: Notes
      description: Use this field to provide any other notes that you feel might be relevant to the issue.
    validations:
      required: false
</file>

<file path=".github/ISSUE_TEMPLATE/config.yaml">
blank_issues_enabled: false
contact_links:
  - name: Ask a question
    url: https://github.com/tomatophp/filament-saas-panel/discussions/new?category=q-a
    about: Ask the community for help
  - name: Request a feature
    url: https://github.com/tomatophp/filament-saas-panel/discussions/new?category=ideas
    about: Share ideas for new features
  - name: Report a security issue
    url: https://github.com/tomatophp/filament-saas-panel/security/policy
    about: Learn how to notify us for sensitive bugs
</file>

<file path=".github/CONTRIBUTING.md">
# Contributing

Contributions are **welcome** and will be fully **credited**.

Please read and understand the contribution guide before creating an issue or pull request.

## Etiquette

This project is open source, and as such, the maintainers give their free time to build and maintain the source code
held within. They make the code freely available in the hope that it will be of use to other developers. It would be
extremely unfair for them to suffer abuse or anger for their hard work.

Please be considerate towards maintainers when raising issues or presenting pull requests. Let's show the
world that developers are civilized and selfless people.

It's the duty of the maintainer to ensure that all submissions to the project are of sufficient
quality to benefit the project. Many developers have different skills, strengths, and weaknesses. Respect the maintainer's decision, and do not be upset or abusive if your submission is not used.

## Viability

When requesting or submitting new features, first consider whether it might be useful to others. Open
source projects are used by many developers, who may have entirely different needs to your own. Think about
whether or not your feature is likely to be used by other users of the project.

## Procedure

Before filing an issue:

- Attempt to replicate the problem, to ensure that it wasn't a coincidental incident.
- Check to make sure your feature suggestion isn't already present within the project.
- Check the pull requests tab to ensure that the bug doesn't have a fix in progress.
- Check the pull requests tab to ensure that the feature isn't already in progress.

Before submitting a pull request:

- Check the codebase to ensure that your feature doesn't already exist.
- Check the pull requests to ensure that another person hasn't already submitted the feature or fix.

## Requirements

If the project maintainer has any additional requirements, you will find them listed here.

- **[PSR-2 Coding Standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md)** - The easiest way to apply the conventions is to install [PHP Code Sniffer](https://pear.php.net/package/PHP_CodeSniffer).

- **Add tests!** - Your patch won't be accepted if it doesn't have tests.

- **Document any change in behaviour** - Make sure the `README.md` and any other relevant documentation are kept up-to-date.

- **Consider our release cycle** - We try to follow [SemVer v2.0.0](https://semver.org/). Randomly breaking public APIs is not an option.

- **One pull request per feature** - If you want to do more than one thing, send multiple pull requests.

- **Send coherent history** - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please [squash them](https://www.git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages) before submitting.

**Happy coding**!
</file>

<file path=".github/dependabot.yml">
# Please see the documentation for all configuration options:
# https://help.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

version: 2
updates:

  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
    labels:
      - "dependencies"
</file>

<file path=".github/SECURITY.md">
# Security Policy

If you discover any security related issues, please email info@3x1.io instead of using the issue tracker.
</file>

<file path="database/migrations/2024_07_15_150609_create_personal_access_tokens_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        if (! Schema::hasTable('personal_access_tokens')) {
            Schema::create('personal_access_tokens', function (Blueprint $table) {
                $table->id();
                $table->morphs('tokenable');
                $table->string('name');
                $table->string('token', 64)->unique();
                $table->text('abilities')->nullable();
                $table->timestamp('last_used_at')->nullable();
                $table->timestamp('expires_at')->nullable();
                $table->timestamps();
            });
        }

    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};
</file>

<file path="database/migrations/2024_10_28_143941_add_media_if_not_exists_table copy.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        if (! Schema::hasTable('media')) {
            Schema::create('media', function (Blueprint $table) {
                $table->id();

                $table->morphs('model');
                $table->uuid()->nullable()->unique();
                $table->string('collection_name');
                $table->string('name');
                $table->string('file_name');
                $table->string('mime_type')->nullable();
                $table->string('disk');
                $table->string('conversions_disk')->nullable();
                $table->unsignedBigInteger('size');
                $table->json('manipulations');
                $table->json('custom_properties');
                $table->json('generated_conversions');
                $table->json('responsive_images');
                $table->unsignedInteger('order_column')->nullable()->index();

                $table->nullableTimestamps();
            });
        }
    }
};
</file>

<file path="database/migrations/2025_08_25_143941_add_otp_fields_if_not_exists_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        if (Schema::hasTable(config('filament-saas-panel.user_table'))) {
            Schema::table(config('filament-saas-panel.user_table'), function (Blueprint $table) {
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'phone')) {
                    $table->string('phone')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'username')) {
                    $table->string('username')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'login_by')) {
                    $table->string('login_by')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'otp_code')) {
                    $table->string('otp_code')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'otp_activated_at')) {
                    $table->dateTime('otp_activated_at')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'last_login')) {
                    $table->dateTime('last_login')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'agent')) {
                    $table->longText('agent')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'host')) {
                    $table->string('host')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_login')) {
                    $table->boolean('is_login')->default(0)->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_active')) {
                    $table->boolean('is_active')->default(false);
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_notification_active')) {
                    $table->boolean('is_notification_active')->default(true);
                }
            });
        }
    }

    public function down()
    {
        Schema::table(config('filament-saas-panel.user_table'), function (Blueprint $table) {
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'phone')) {
                $table->dropColumn('phone');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'username')) {
                $table->dropColumn('username');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'login_by')) {
                $table->dropColumn('login_by');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'otp_code')) {
                $table->dropColumn('otp_code');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'otp_activated_at')) {
                $table->dropColumn('otp_activated_at');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'last_login')) {
                $table->dropColumn('last_login');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'agent')) {
                $table->dropColumn('agent');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'host')) {
                $table->dropColumn('host');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_login')) {
                $table->dropColumn('is_login');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_active')) {
                $table->dropColumn('is_active');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_notification_active')) {
                $table->dropColumn('is_notification_active');
            }
        });
    }
};
</file>

<file path="publish/migrations/create_team_invitations_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('team_invitations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('team_id')->constrained()->cascadeOnDelete();
            $table->string('email');
            $table->string('role')->nullable();
            $table->timestamps();

            $table->unique(['team_id', 'email']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('team_invitations');
    }
};
</file>

<file path="publish/migrations/create_team_user_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('team_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('team_id');
            $table->foreignId('account_id')->references('id')->on('accounts')->onDelete('cascade');
            $table->string('role')->nullable();
            $table->timestamps();

            $table->unique(['team_id', 'account_id']);
        });

        Schema::table('accounts', function (Blueprint $table) {
            $table->rememberToken();
            $table->foreignId('current_team_id')->nullable();
            $table->string('profile_photo_path', 2048)->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('team_user');
    }
};
</file>

<file path="publish/migrations/create_teams_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('teams', function (Blueprint $table) {
            $table->id();
            $table->foreignId('account_id')->references('id')->on('accounts')->onDelete('cascade');
            $table->string('name');
            $table->boolean('personal_team');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('teams');
    }
};
</file>

<file path="publish/Account.php">
<?php

namespace App\Models;

use Filament\Models\Contracts\FilamentUser;
use Filament\Models\Contracts\HasAvatar;
use Filament\Models\Contracts\HasTenants;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use TomatoPHP\FilamentSaasPanel\Traits\InteractsWithTenant;

/**
 * @property int $id
 * @property string $name
 * @property string $username
 * @property string $loginBy
 * @property string $type
 * @property string $address
 * @property string $password
 * @property string $otp_code
 * @property string $otp_activated_at
 * @property string $last_login
 * @property string $agent
 * @property string $host
 * @property int $attempts
 * @property bool $login
 * @property bool $activated
 * @property bool $blocked
 * @property string $deleted_at
 * @property string $created_at
 * @property string $updated_at
 */
class Account extends Authenticatable implements FilamentUser, HasAvatar, HasMedia, HasTenants
{
    use HasFactory;
    use InteractsWithMedia;
    use InteractsWithTenant;
    use Notifiable;
    use SoftDeletes;

    /**
     * @var array
     */
    protected $fillable = [
        'email',
        'phone',
        'parent_id',
        'type',
        'name',
        'username',
        'loginBy',
        'address',
        'password',
        'otp_code',
        'otp_activated_at',
        'last_login',
        'agent',
        'host',
        'is_login',
        'is_active',
        'deleted_at',
        'created_at',
        'updated_at',
    ];

    protected $casts = [
        'is_login' => 'boolean',
        'is_active' => 'boolean',
    ];

    protected $dates = [
        'deleted_at',
        'created_at',
        'updated_at',
        'otp_activated_at',
        'last_login',
    ];

    protected $hidden = [
        'password',
        'remember_token',
        'otp_code',
        'otp_activated_at',
        'host',
        'agent',
    ];

    public function getFilamentAvatarUrl(): ?string
    {
        return $this->getFirstMediaUrl('avatar') ?? null;
    }
}
</file>

<file path="publish/Membership.php">
<?php

namespace App\Models;

use Laravel\Jetstream\Membership as JetstreamMembership;

class Membership extends JetstreamMembership
{
    /**
     * Indicates if the IDs are auto-incrementing.
     *
     * @var bool
     */
    public $incrementing = true;
}
</file>

<file path="publish/Team.php">
<?php

namespace App\Models;

use Filament\Models\Contracts\HasAvatar;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Laravel\Jetstream\Events\TeamCreated;
use Laravel\Jetstream\Events\TeamDeleted;
use Laravel\Jetstream\Events\TeamUpdated;
use Laravel\Jetstream\Team as JetstreamTeam;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Team extends JetstreamTeam implements HasAvatar, HasMedia
{
    use HasFactory;
    use InteractsWithMedia;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'account_id',
        'name',
        'personal_team',
    ];

    /**
     * The event map for the model.
     *
     * @var array<string, class-string>
     */
    protected $dispatchesEvents = [
        'created' => TeamCreated::class,
        'updated' => TeamUpdated::class,
        'deleted' => TeamDeleted::class,
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'personal_team' => 'boolean',
        ];
    }

    public function getFilamentAvatarUrl(): ?string
    {
        return $this->getFirstMediaUrl('avatar') ?: null;
    }

    public function owner(): BelongsTo
    {
        return $this->belongsTo(Account::class, 'account_id');
    }
}
</file>

<file path="publish/TeamInvitation.php">
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Laravel\Jetstream\Jetstream;
use Laravel\Jetstream\TeamInvitation as JetstreamTeamInvitation;

class TeamInvitation extends JetstreamTeamInvitation
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'email',
        'role',
    ];

    /**
     * Get the team that the invitation belongs to.
     */
    public function team(): BelongsTo
    {
        return $this->belongsTo(Jetstream::teamModel());
    }
}
</file>

<file path="resources/lang/ar/messages.php">
<?php

return [
    'profile' => [
        'title' => 'تعديل الملف الشخصي',
        'edit' => [
            'title' => 'تعديل المعلومات',
            'description' => 'تحديث معلومات الملف الشخصي وعنوان البريد الإلكتروني الخاص بحسابك.',
            'name' => 'الاسم',
            'avatar' => 'صورة الملف الشخصي',
            'email' => 'البريد الإلكتروني',
        ],
        'password' => [
            'title' => 'تغيير كلمة المرور',
            'description' => 'تأكد من أن حسابك يستخدم كلمة مرور طويلة وعشوائية للبقاء آمنًا.',
            'current_password' => 'كلمة المرور الحالية',
            'new_password' => 'كلمة المرور الجديدة',
            'confirm_password' => 'تأكيد كلمة المرور',
        ],
        'browser' => [
            'sessions_last_active' => 'اخر جلسة',
            'browser_section_title' => 'جلسات المتصفح',
            'browser_section_description' => 'إدارة وتسجيل الخروج من جلساتك النشطة على المتصفحات والأجهزة الأخرى.',
            'browser_sessions_log_out' => 'تسجيل الخروج من جلسات المتصفح الأخرى',
            'browser_sessions_confirm_pass' => 'يرجى إدخال كلمة المرور لتأكيد رغبتك في تسجيل الخروج من جلسات المتصفح الأخرى عبر جميع أجهزتك.',
            'password' => 'كلمة المرور',
            'confirm' => 'تأكيد',
            'nevermind' => 'لا بأس',
            'browser_sessions_logout_notification' => 'تم تسجيل الخروج من جلسات المتصفح الخاصة بك.',
            'browser_sessions_logout_failed_notification' => 'كلمة المرور غير صحيحة.',
            'sessions_device' => 'الجهاز',
            'sessions_content' => 'الأجهزة المتصلة',
            'incorrect_password' => 'كلمة المرور التي أدخلتها غير صحيحة.',
        ],
        'delete' => [
            'delete_account' => 'حذف الحساب',
            'delete_account_description' => 'حذف حسابك بشكل دائم.',
            'incorrect_password' => 'كلمة المرور التي أدخلتها غير صحيحة.',
            'are_you_sure' => 'هل أنت متأكد من أنك تريد حذف حسابك؟ بمجرد حذف حسابك، سيتم حذف جميع موارده وبياناته بشكل دائم. يرجى إدخال كلمة المرور لتأكيد رغبتك في حذف حسابك نهائيًا.',
            'yes_delete_it' => 'نعم، احذفه',
            'password' => 'كلمة المرور',
            'delete_account_card_description' => 'بمجرد حذف حسابك، سيتم حذف جميع موارده وبياناته بشكل دائم. قبل حذف حسابك، يرجى تنزيل أي بيانات أو معلومات ترغب في الاحتفاظ بها.',
        ],
        'delete-team' => [
            'title' => 'حذف الفريق',
            'description' => 'حذف فريقك بشكل دائم.',
            'body' => 'بمجرد حذف الفريق، سيتم حذف جميع موارده وبياناته بشكل دائم. قبل حذف هذا الفريق، يرجى تنزيل أي بيانات أو معلومات ترغب في الاحتفاظ بها.',
            'delete' => 'حذف الفريق',
            'delete_account' => 'حذف الفريق',
            'delete_account_description' => 'هل أنت متأكد من أنك تريد حذف فريقك؟ بمجرد حذف فريقك، سيتم حذف جميع موارده وبياناته بشكل دائم. يرجى إدخال كلمة المرور لتأكيد رغبتك في حذف فريقك نهائيًا.',
            'yes_delete_it' => 'نعم، احذفه',
            'password' => 'كلمة المرور',
            'incorrect_password' => 'كلمة المرور التي أدخلتها غير صحيحة.',
            'are_you_sure' => 'هل أنت متأكد من أنك تريد حذف فريقك؟ بمجرد حذف فريقك، سيتم حذف جميع موارده وبياناته بشكل دائم. يرجى إدخال كلمة المرور لتأكيد رغبتك في حذف فريقك نهائيًا.',
        ],
        'token' => [
            'title' => 'رموز API',
            'description' => 'تسمح رموز API للخدمات الخارجية بالمصادقة مع تطبيقنا نيابةً عنك.',
            'name' => 'الاسم',
            'created_at' => 'تم الإنشاء في',
            'expires_at' => 'تنتهي في',
            'abilities' => 'القدرات',
            'action_label' => 'إنشاء رمز',
            'create_notification' => 'تم إنشاء الرمز بنجاح!',
            'modal_heading' => 'إنشاء رمز',
            'empty_state_heading' => 'لا توجد رموز',
            'empty_state_description' => 'إنشاء رمز جديد للمصادقة مع API.',
            'delete_token' => 'حذف الرمز',
            'delete_token_description' => 'هل أنت متأكد من أنك تريد حذف هذا الرمز؟',
            'delete_token_confirmation' => 'نعم، احذفه',
            'delete_token_notification' => 'تم حذف الرمز بنجاح!',
            'modal_heading_2' => 'تم إنشاء الرمز بنجاح',
            'helper_text' => 'يمكنك تعديل الرمز أدناه. تأكد من نسخه الآن، حيث لن تتمكن من رؤيته مرة أخرى.',
            'token' => 'الرمز',
        ],
    ],
    'teams' => [
        'title' => 'إعدادات الفريق',
        'actions' => [
            'cancel_invitation' => 'إلغاء الدعوة',
            'resend_invitation' => 'إعادة ارسال الدعوة',
        ],
        'edit' => [
            'title' => 'تعديل إسم الفريق',
            'description' => 'تحديث معلومات الفريق وصورة الفريقك.',
            'name' => 'الاسم',
            'email' => 'البريد الإلكتروني',
            'avatar' => 'الصورة الرمزية',
            'save' => 'حفظ',
            'owner' => 'المالك',
        ],
        'members' => [
            'title' => 'دعوة أعضاء الفريق',
            'description' => 'إضافة عضو فريق جديد إلى فريقك، مما يسمح له بالتعاون معك.',
            'team-members' => 'يرجى تقديم عنوان البريد الإلكتروني للشخص الذي ترغب في إضافته إلى هذا الفريق.',
            'email' => 'البريد الإلكتروني',
            'role' => 'الدور',
            'send_invitation' => 'إرسال الدعوة',
            'cancel' => 'إلغاء',
            'not_in' => 'عنوان البريد الإلكتروني هو بالفعل عضو في الفريق.',
            'required' => 'حقل البريد الإلكتروني مطلوب.',
            'unique' => 'عنوان البريد الإلكتروني هو بالفعل عضو في الفريق.',
            'role_required' => 'حقل الدور مطلوب.',
            'notifications' => [
                'title' => 'دعوة عضو فريق',
                'body' => 'لقد تمت دعوتك للانضمام إلى فريق :team.',
                'accept' => 'قبول الدعوة',
                'cancel' => 'إلغاء الدعوة',
            ],
            'leave_team' => 'مغادرة الفريق',
            'remove_member' => 'إزالة عضو',
            'manage_role' => 'إدارة الدور',
            'list' => [
                'title' => 'أعضاء الفريق',
                'description' => 'جميع الأشخاص الذين هم جزء من هذا الفريق.',
            ],
        ],
        'delete' => [
            'title' => 'حذف الفريق',
            'description' => 'حذف فريقك بشكل دائم.',
            'body' => 'بمجرد حذف فريق، سيتم حذف جميع موارده وبياناته بشكل دائم. قبل حذف هذا الفريق، يرجى تنزيل أي بيانات أو معلومات تتعلق بهذا الفريق التي ترغب في الاحتفاظ بها.',
            'delete' => 'حذف الفريق',
            'delete_account' => 'حذف الفريق',
            'delete_account_description' => 'هل أنت متأكد أنك تريد حذف فريقك؟ بمجرد حذف فريقك، سيتم حذف جميع موارده وبياناته بشكل دائم. يرجى إدخال كلمة المرور الخاصة بك لتأكيد أنك ترغب في حذف فريقك بشكل دائم.',
            'yes_delete_it' => 'نعم، احذفه',
            'password' => 'كلمة المرور',
            'incorrect_password' => 'كلمة المرور التي أدخلتها غير صحيحة.',
            'are_you_sure' => 'هل أنت متأكد أنك تريد حذف فريقك؟ بمجرد حذف فريقك، سيتم حذف جميع موارده وبياناته بشكل دائم. يرجى إدخال كلمة المرور الخاصة بك لتأكيد أنك ترغب في حذف فريقك بشكل دائم.',
        ],
    ],
    'team' => [
        'title' => 'الفرق',
        'single' => 'فريق',
        'columns' => [
            'avatar' => 'الشعار',
            'name' => 'الاسم',
            'owner' => 'المالك',
            'personal_team' => 'فريق شخصي',
        ],
    ],
    'saved_successfully' => 'تم الحفظ بنجاح',
    'save' => 'حفظ',
];
</file>

<file path="resources/views/livewire/contact-us.blade.php">
<div>
    @if(filament()->hasPlugin('filament-saas-accounts') && filament('filament-saas-accounts')->showContactUsButton)
        <div class="border-t dark:border-gray-700 p-4">
            <span class="text-gray-400">{{ trans('filament-accounts::messages.contact-us.footer') }}</span> {{ $this->getContactUsAction }}
        </div>

        <x-filament-actions::modals />
    @endif
</div>
</file>

<file path="resources/views/livewire/sanctum-tokens.blade.php">
<div>
    {{ $this->table }}
</div>
</file>

<file path="resources/views/teams/api-tokens.blade.php">
<x-filament-panels::page>
    @livewire(\TomatoPHP\FilamentSaasPanel\Livewire\SanctumTokens::class)
</x-filament-panels::page>
</file>

<file path="src/Actions/Fortify/CreateNewUser.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Fortify;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Laravel\Fortify\Contracts\CreatesNewUsers;
use Laravel\Jetstream\Jetstream;
use TomatoPHP\FilamentAccounts\Models\Account;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class CreateNewUser implements CreatesNewUsers
{
    use PasswordValidationRules;

    /**
     * Create a newly registered user.
     *
     * @param  array<string, string>  $input
     */
    public function create(array $input): Account
    {
        Validator::make($input, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:accounts'],
            'password' => $this->passwordRules(),
            'terms' => Jetstream::hasTermsAndPrivacyPolicyFeature() ? ['accepted', 'required'] : '',
        ])->validate();

        return DB::transaction(function () use ($input) {
            return tap(Account::query()->create([
                'name' => $input['name'],
                'email' => $input['email'],
                'loginBy' => 'email',
                'type' => 'account',
                'password' => Hash::make($input['password']),
            ]), function (Account $user) {
                $this->createTeam($user);
            });
        });
    }

    /**
     * Create a personal team for the user.
     */
    protected function createTeam(Account $user): void
    {
        $user->ownedTeams()->save(Team::forceCreate([
            'account_id' => $user->id,
            'name' => explode(' ', $user->name, 2)[0]."'s Team",
            'personal_team' => true,
        ]));
    }
}
</file>

<file path="src/Actions/Fortify/PasswordValidationRules.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Fortify;

use Illuminate\Validation\Rules\Password;

trait PasswordValidationRules
{
    /**
     * Get the validation rules used to validate passwords.
     */
    protected function passwordRules(): array
    {
        return ['required', 'string', Password::default(), 'confirmed'];
    }
}
</file>

<file path="src/Actions/Fortify/ResetUserPassword.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Fortify;

use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Laravel\Fortify\Contracts\ResetsUserPasswords;
use TomatoPHP\FilamentAccounts\Models\Account;

class ResetUserPassword implements ResetsUserPasswords
{
    use PasswordValidationRules;

    /**
     * Validate and reset the user's forgotten password.
     *
     * @param  array<string, string>  $input
     */
    public function reset(Account $user, array $input): void
    {
        Validator::make($input, [
            'password' => $this->passwordRules(),
        ])->validate();

        $user->forceFill([
            'password' => Hash::make($input['password']),
        ])->save();
    }
}
</file>

<file path="src/Actions/Fortify/UpdateUserPassword.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Fortify;

use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Laravel\Fortify\Contracts\UpdatesUserPasswords;
use TomatoPHP\FilamentAccounts\Models\Account;

class UpdateUserPassword implements UpdatesUserPasswords
{
    use PasswordValidationRules;

    /**
     * Validate and update the user's password.
     *
     * @param  array<string, string>  $input
     */
    public function update(Account $user, array $input): void
    {
        Validator::make($input, [
            'current_password' => ['required', 'string', 'current_password:web'],
            'password' => $this->passwordRules(),
        ], [
            'current_password.current_password' => __('The provided password does not match your current password.'),
        ])->validateWithBag('updatePassword');

        $user->forceFill([
            'password' => Hash::make($input['password']),
        ])->save();
    }
}
</file>

<file path="src/Actions/Fortify/UpdateUserProfileInformation.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Fortify;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Laravel\Fortify\Contracts\UpdatesUserProfileInformation;
use TomatoPHP\FilamentAccounts\Models\Account;

class UpdateUserProfileInformation implements UpdatesUserProfileInformation
{
    /**
     * Validate and update the given user's profile information.
     *
     * @param  array<string, mixed>  $input
     */
    public function update(Account $user, array $input): void
    {
        Validator::make($input, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'email', 'max:255', Rule::unique('accounts')->ignore($user->id)],
            'phone' => ['required',  'max:255', Rule::unique('accounts')->ignore($user->id)],
            'photo' => ['nullable', 'mimes:jpg,jpeg,png', 'max:1024'],
        ])->validateWithBag('updateProfileInformation');

        if (isset($input['photo'])) {
            $user->updateProfilePhoto($input['photo']);
        }

        if ($input['email'] !== $user->email &&
            $user instanceof MustVerifyEmail) {
            $this->updateVerifiedUser($user, $input);
        } else {
            $user->forceFill([
                'name' => $input['name'],
                'email' => $input['email'],
                'phone' => $input['phone'],
            ])->save();
        }
    }

    /**
     * Update the given verified user's profile information.
     *
     * @param  array<string, string>  $input
     */
    protected function updateVerifiedUser(Account $user, array $input): void
    {
        $user->forceFill([
            'name' => $input['name'],
            'email' => $input['email'],
            'phone' => $input['phone'],
        ])->save();

        $user->sendEmailVerificationNotification();
    }
}
</file>

<file path="src/Actions/Jetstream/AddTeamMember.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Jetstream;

use Closure;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Validator;
use Laravel\Jetstream\Contracts\AddsTeamMembers;
use Laravel\Jetstream\Events\AddingTeamMember;
use Laravel\Jetstream\Events\TeamMemberAdded;
use Laravel\Jetstream\Jetstream;
use Laravel\Jetstream\Rules\Role;
use TomatoPHP\FilamentAccounts\Models\Account;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class AddTeamMember implements AddsTeamMembers
{
    /**
     * Add a new team member to the given team.
     */
    public function add(Account $user, Team $team, string $email, ?string $role = null): void
    {
        Gate::forUser($user)->authorize('addTeamMember', $team);

        $this->validate($team, $email, $role);

        $newTeamMember = Jetstream::findUserByEmailOrFail($email);

        AddingTeamMember::dispatch($team, $newTeamMember);

        $team->users()->attach(
            $newTeamMember, ['role' => $role]
        );

        TeamMemberAdded::dispatch($team, $newTeamMember);
    }

    /**
     * Validate the add member operation.
     */
    protected function validate(Team $team, string $email, ?string $role): void
    {
        Validator::make([
            'email' => $email,
            'role' => $role,
        ], $this->rules(), [
            'email.exists' => __('We were unable to find a registered user with this email address.'),
        ])->after(
            $this->ensureUserIsNotAlreadyOnTeam($team, $email)
        )->validateWithBag('addTeamMember');
    }

    /**
     * Get the validation rules for adding a team member.
     */
    protected function rules(): array
    {
        return array_filter([
            'email' => ['required', 'email', 'exists:accounts'],
            'role' => Jetstream::hasRoles()
                            ? ['required', 'string', new Role]
                            : null,
        ]);
    }

    /**
     * Ensure that the user is not already on the team.
     */
    protected function ensureUserIsNotAlreadyOnTeam(Team $team, string $email): Closure
    {
        return function ($validator) use ($team, $email) {
            $validator->errors()->addIf(
                $team->hasUserWithEmail($email),
                'email',
                __('This user already belongs to the team.')
            );
        };
    }
}
</file>

<file path="src/Actions/Jetstream/DeleteTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Jetstream;

use Laravel\Jetstream\Contracts\DeletesTeams;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class DeleteTeam implements DeletesTeams
{
    /**
     * Delete the given team.
     */
    public function delete(Team $team): void
    {
        $team->purge();
    }
}
</file>

<file path="src/Actions/Jetstream/DeleteUser.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Jetstream;

use Illuminate\Support\Facades\DB;
use Laravel\Jetstream\Contracts\DeletesTeams;
use Laravel\Jetstream\Contracts\DeletesUsers;
use TomatoPHP\FilamentAccounts\Models\Account;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class DeleteUser implements DeletesUsers
{
    /**
     * Create a new action instance.
     */
    public function __construct(protected DeletesTeams $deletesTeams) {}

    /**
     * Delete the given user.
     */
    public function delete(Account $user): void
    {
        DB::transaction(function () use ($user) {
            $this->deleteTeams($user);
            $user->deleteProfilePhoto();
            $user->tokens->each->delete();
            $user->delete();
        });
    }

    /**
     * Delete the teams and team associations attached to the user.
     */
    protected function deleteTeams(Account $user): void
    {
        $user->teams()->detach();

        $user->ownedTeams->each(function (Team $team) {
            $this->deletesTeams->delete($team);
        });
    }
}
</file>

<file path="src/Actions/Jetstream/RemoveTeamMember.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Jetstream;

use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Support\Facades\Gate;
use Illuminate\Validation\ValidationException;
use Laravel\Jetstream\Contracts\RemovesTeamMembers;
use Laravel\Jetstream\Events\TeamMemberRemoved;
use TomatoPHP\FilamentAccounts\Models\Account;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class RemoveTeamMember implements RemovesTeamMembers
{
    /**
     * Remove the team member from the given team.
     */
    public function remove(Account $user, Team $team, Account $teamMember): void
    {
        $this->authorize($user, $team, $teamMember);

        $this->ensureUserDoesNotOwnTeam($teamMember, $team);

        $team->removeUser($teamMember);

        TeamMemberRemoved::dispatch($team, $teamMember);
    }

    /**
     * Authorize that the user can remove the team member.
     */
    protected function authorize(Account $user, Team $team, Account $teamMember): void
    {
        if (! Gate::forUser($user)->check('removeTeamMember', $team) &&
            $user->id !== $teamMember->id) {
            throw new AuthorizationException;
        }
    }

    /**
     * Ensure that the currently authenticated user does not own the team.
     */
    protected function ensureUserDoesNotOwnTeam(Account $teamMember, Team $team): void
    {
        if ($teamMember->id === $team->owner->id) {
            throw ValidationException::withMessages([
                'team' => [__('You may not leave a team that you created.')],
            ])->errorBag('removeTeamMember');
        }
    }
}
</file>

<file path="src/Console/FilamentSaasPanelInstall.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Console;

use Illuminate\Console\Command;
use TomatoPHP\ConsoleHelpers\Traits\RunCommand;

class FilamentSaasPanelInstall extends Command
{
    use RunCommand;

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $name = 'filament-saas-panel:install';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'install package and publish assets';

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $this->info('Publish Vendor Assets');
        $this->artisanCommand(['migrate']);
        $this->artisanCommand(['optimize:clear']);
        $this->info('Filament SaaS Panel installed successfully.');
    }
}
</file>

<file path="src/Events/AccountLogged.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class AccountLogged implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct(
        public $model,
        public $modelId,
    ) {}

    /**
     * Get the channels the event should broadcast on.
     */
    public function broadcastOn(): Channel
    {
        return new Channel('account.logged');
    }
}
</file>

<file path="src/Events/AccountOTPCheck.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class AccountOTPCheck implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct(
        public $model,
        public $modelId,
    ) {}

    /**
     * Get the channels the event should broadcast on.
     */
    public function broadcastOn(): Channel
    {
        return new Channel('account.otp.check');
    }
}
</file>

<file path="src/Events/AccountRegistered.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class AccountRegistered implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct(
        public $model,
        public $modelId,
    ) {}

    /**
     * Get the channels the event should broadcast on.
     */
    public function broadcastOn(): Channel
    {
        return new Channel('account.registered');
    }
}
</file>

<file path="src/Events/SendOTP.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class SendOTP implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct(
        public $model,
        public $modelId,
    ) {}

    /**
     * Get the channels the event should broadcast on.
     */
    public function broadcastOn(): Channel
    {
        return new Channel('send.otp');
    }
}
</file>

<file path="src/Events/SendWelcome.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class SendWelcome implements ShouldBroadcast
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct(
        public $model,
        public $modelId,
    ) {}

    /**
     * Get the channels the event should broadcast on.
     */
    public function broadcastOn(): Channel
    {
        return new Channel('send.welcome');
    }
}
</file>

<file path="src/Filament/Pages/EditProfile/HasNotification.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile;

use Filament\Notifications\Notification;

trait HasNotification
{
    private function sendSuccessNotification(): void
    {
        Notification::make()
            ->success()
            ->title(trans('filament-saas-panel::messages.saved_successfully'))
            ->send();

        $data = $this->getUser()->attributesToArray();

        $this->editProfileForm->fill($data);
        $this->editPasswordForm->fill();
    }
}
</file>

<file path="src/Filament/Pages/EditTeam/HasNotifications.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam;

use Filament\Facades\Filament;
use Filament\Notifications\Notification;

trait HasNotifications
{
    private function sendSuccessNotification()
    {
        Notification::make()
            ->success()
            ->title(trans('filament-saas-panel::messages.saved_successfully'))
            ->send();

        $this->editTeamForm->fill(Filament::getTenant()->toArray());
        $this->deleteTeamFrom->fill(Filament::getTenant()->toArray());
        $this->manageTeamMembersForm->fill([]);
    }
}
</file>

<file path="src/Filament/Resources/TeamResource/Actions/TeamBulkAction.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource\Actions;

use Filament\Forms\Components\Select;
use Filament\Notifications\Notification;
use Filament\Tables\Actions\BulkAction;
use Illuminate\Database\Eloquent\Collection;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class TeamBulkAction
{
    public static function make(): BulkAction
    {
        return BulkAction::make('teams')
            ->color('info')
            ->tooltip(trans('filament-saas-panel::messages.actions.edit.label'))
            ->label(trans('filament-saas-panel::messages.actions.edit.label'))
            ->icon('heroicon-s-user-group')
            ->form([
                Select::make('teams')
                    ->columnSpanFull()
                    ->multiple()
                    ->searchable()
                    ->preload()
                    ->options(Team::query()->pluck('name', 'id')->toArray()),
            ])
            ->deselectRecordsAfterCompletion()
            ->action(function (array $data, Collection $record) {
                $record->each(function ($account) use ($data) {
                    $account->teams()->sync($data['teams']);
                });

                Notification::make()
                    ->body(trans('filament-saas-panel::messages.actions.edit.notification'))
                    ->success()
                    ->send();
            });
    }
}
</file>

<file path="src/Filament/Resources/TeamResource/Actions/TeamTableAction.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource\Actions;

use Filament\Forms\Components\Select;
use Filament\Notifications\Notification;
use Filament\Tables\Actions\Action;

class TeamTableAction
{
    public static function make(): Action
    {
        return Action::make('teams')
            ->iconButton()
            ->color('info')
            ->tooltip(trans('filament-saas-panel::messages.actions.edit.label'))
            ->icon('heroicon-s-user-group')
            ->fillForm(fn ($record) => [
                'teams' => $record->teams->pluck('id')->toArray(),
            ])
            ->form([
                Select::make('teams')
                    ->columnSpanFull()
                    ->multiple()
                    ->searchable()
                    ->preload()
                    ->relationship('teams', 'name'),
            ])
            ->action(function (array $data, $record) {
                Notification::make()
                    ->body(trans('filament-saas-panel::messages.actions.edit.notification'))
                    ->success()
                    ->send();
            });
    }
}
</file>

<file path="src/Filament/Resources/TeamResource/Filters/TeamFilter.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource\Filters;

use Filament\Tables\Filters\SelectFilter;

class TeamFilter
{
    public static function make(): SelectFilter
    {
        return SelectFilter::make('teams')
            ->label(trans('filament-saas-panel::messages.filter'))
            ->searchable()
            ->preload()
            ->multiple()
            ->relationship('teams', 'name');
    }
}
</file>

<file path="src/Filament/Resources/TeamResource/Form/TeamComponent.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource\Form;

use Filament\Forms\Components\Select;

class TeamComponent
{
    public static function make(): Select
    {
        return Select::make('teams')
            ->label(trans('filament-saas-panel::messages.column.teams'))
            ->columnSpanFull()
            ->multiple()
            ->searchable()
            ->preload()
            ->relationship('teams', 'name');
    }
}
</file>

<file path="src/Filament/Resources/TeamResource/Pages/ListTeams.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource\Pages;

use Filament\Actions;
use Filament\Resources\Pages\ManageRecords;
use TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource;

class ListTeams extends ManageRecords
{
    protected static string $resource = TeamResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\CreateAction::make(),
        ];
    }
}
</file>

<file path="src/Filament/Resources/TeamResource/Table/TeamColumn.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource\Table;

use Filament\Tables\Columns\ImageColumn;

class TeamColumn
{
    public static function make(): ImageColumn
    {
        return ImageColumn::make('teams.avatar')
            ->label(trans('filament-saas-panel::messages.column.teams'))
            ->circular()
            ->tooltip(fn ($record) => $record->teams()->pluck('name')->join(', '))
            ->stacked();
    }
}
</file>

<file path="src/Listeners/SwitchTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Listeners;

use Filament\Events\TenantSet;
use Laravel\Jetstream\Features;

class SwitchTeam
{
    /**
     * Create the event listener.
     */
    public function __construct()
    {
        //
    }

    /**
     * Handle the event.
     */
    public function handle(TenantSet $event): void
    {
        if (Features::hasTeamFeatures()) {
            $user = $event->getUser();

            $team = $event->getTenant();

            $user->switchTeam($team);
        }
    }
}
</file>

<file path="src/Mail/TeamInvitation.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\URL;
use Laravel\Jetstream\TeamInvitation as TeamInvitationModel;

class TeamInvitation extends Mailable
{
    use Queueable, SerializesModels;

    /**
     * The team invitation instance.
     *
     * @var \Laravel\Jetstream\TeamInvitation
     */
    public $invitation;

    /**
     * Create a new message instance.
     *
     * @return void
     */
    public function __construct(TeamInvitationModel $invitation)
    {
        $this->invitation = $invitation;
    }

    /**
     * Build the message.
     *
     * @return $this
     */
    public function build()
    {
        return $this->markdown(config('filament-saas-panel.team_invitation_mail_view'), ['acceptUrl' => URL::signedRoute('team-invitations.accept', [
            'invitation' => $this->invitation,
        ])])->subject(__('Team Invitation'));
    }
}
</file>

<file path="src/Models/Membership.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Models;

use Laravel\Jetstream\Membership as JetstreamMembership;

class Membership extends JetstreamMembership
{
    /**
     * Indicates if the IDs are auto-incrementing.
     *
     * @var bool
     */
    public $incrementing = true;
}
</file>

<file path="src/Models/TeamInvitation.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Models;

use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Laravel\Jetstream\Jetstream;
use Laravel\Jetstream\TeamInvitation as JetstreamTeamInvitation;

class TeamInvitation extends JetstreamTeamInvitation
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'email',
        'role',
    ];

    /**
     * Get the team that the invitation belongs to.
     */
    public function team(): BelongsTo
    {
        return $this->belongsTo(Jetstream::teamModel());
    }
}
</file>

<file path="tests/database/factories/UserFactory.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests\Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;
use TomatoPHP\FilamentSaasPanel\Tests\Models\User;

class UserFactory extends Factory
{
    protected $model = User::class;

    public function definition(): array
    {
        return [
            'name' => $this->faker->name(),
            'email' => $this->faker->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
            'remember_token' => Str::random(10),
        ];
    }
}
</file>

<file path="tests/database/migrations/2024_07_15_150609_create_personal_access_tokens_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        if (! Schema::hasTable('personal_access_tokens')) {
            Schema::create('personal_access_tokens', function (Blueprint $table) {
                $table->id();
                $table->morphs('tokenable');
                $table->string('name');
                $table->string('token', 64)->unique();
                $table->text('abilities')->nullable();
                $table->timestamp('last_used_at')->nullable();
                $table->timestamp('expires_at')->nullable();
                $table->timestamps();
            });
        }

    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};
</file>

<file path="tests/database/migrations/2024_10_28_143941_add_media_if_not_exists_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        if (! Schema::hasTable('media')) {
            Schema::create('media', function (Blueprint $table) {
                $table->id();

                $table->morphs('model');
                $table->uuid()->nullable()->unique();
                $table->string('collection_name');
                $table->string('name');
                $table->string('file_name');
                $table->string('mime_type')->nullable();
                $table->string('disk');
                $table->string('conversions_disk')->nullable();
                $table->unsignedBigInteger('size');
                $table->json('manipulations');
                $table->json('custom_properties');
                $table->json('generated_conversions');
                $table->json('responsive_images');
                $table->unsignedInteger('order_column')->nullable()->index();

                $table->nullableTimestamps();
            });
        }
    }
};
</file>

<file path="tests/database/migrations/2024_11_04_112952_create_team_invitations_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('team_invitations', function (Blueprint $table) {
            $table->id();
            $table->foreignId('team_id')->constrained()->cascadeOnDelete();
            $table->string('email');
            $table->string('role')->nullable();
            $table->timestamps();

            $table->unique(['team_id', 'email']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('team_invitations');
    }
};
</file>

<file path="tests/database/migrations/2025_08_25_143941_add_otp_fields_if_not_exists_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        if (Schema::hasTable(config('filament-saas-panel.user_table'))) {
            Schema::table(config('filament-saas-panel.user_table'), function (Blueprint $table) {
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'phone')) {
                    $table->string('phone')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'username')) {
                    $table->string('username')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'login_by')) {
                    $table->string('login_by')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'otp_code')) {
                    $table->string('otp_code')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'otp_activated_at')) {
                    $table->dateTime('otp_activated_at')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'last_login')) {
                    $table->dateTime('last_login')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'agent')) {
                    $table->longText('agent')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'host')) {
                    $table->string('host')->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_login')) {
                    $table->boolean('is_login')->default(0)->nullable();
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_active')) {
                    $table->boolean('is_active')->default(false);
                }
                if (! Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_notification_active')) {
                    $table->boolean('is_notification_active')->default(true);
                }
            });
        }
    }

    public function down()
    {
        Schema::table(config('filament-saas-panel.user_table'), function (Blueprint $table) {
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'phone')) {
                $table->dropColumn('phone');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'username')) {
                $table->dropColumn('username');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'login_by')) {
                $table->dropColumn('login_by');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'otp_code')) {
                $table->dropColumn('otp_code');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'otp_activated_at')) {
                $table->dropColumn('otp_activated_at');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'last_login')) {
                $table->dropColumn('last_login');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'agent')) {
                $table->dropColumn('agent');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'host')) {
                $table->dropColumn('host');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_login')) {
                $table->dropColumn('is_login');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_active')) {
                $table->dropColumn('is_active');
            }
            if (Schema::hasColumn(config('filament-saas-panel.user_table'), 'is_notification_active')) {
                $table->dropColumn('is_notification_active');
            }
        });
    }
};
</file>

<file path="tests/src/Models/Membership.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests\Models;

use Laravel\Jetstream\Membership as JetstreamMembership;

class Membership extends JetstreamMembership
{
    /**
     * Indicates if the IDs are auto-incrementing.
     *
     * @var bool
     */
    public $incrementing = true;
}
</file>

<file path="tests/src/Models/TeamInvitation.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests\Models;

use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Laravel\Jetstream\Jetstream;
use Laravel\Jetstream\TeamInvitation as JetstreamTeamInvitation;

class TeamInvitation extends JetstreamTeamInvitation
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'email',
        'role',
    ];

    /**
     * Get the team that the invitation belongs to.
     */
    public function team(): BelongsTo
    {
        return $this->belongsTo(Jetstream::teamModel());
    }
}
</file>

<file path="tests/src/AppPanelProvider.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests;

use Filament\Http\Middleware\Authenticate;
use Filament\Http\Middleware\DisableBladeIconComponents;
use Filament\Http\Middleware\DispatchServingFilamentEvent;
use Filament\Pages;
use Filament\Panel;
use Filament\PanelProvider;
use Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse;
use Illuminate\Cookie\Middleware\EncryptCookies;
use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken;
use Illuminate\Routing\Middleware\SubstituteBindings;
use Illuminate\Session\Middleware\AuthenticateSession;
use Illuminate\Session\Middleware\StartSession;
use Illuminate\View\Middleware\ShareErrorsFromSession;
use TomatoPHP\FilamentSaasPanel\FilamentSaasPanelPlugin;

class AppPanelProvider extends PanelProvider
{
    public function panel(Panel $panel): Panel
    {
        return $panel
            ->default()
            ->id('app')
            ->path('app')
            ->login()
            ->pages([
                Pages\Dashboard::class,
            ])
            ->plugin(
                FilamentSaasPanelPlugin::make()
                    ->editTeam()
                    ->deleteTeam()
                    ->showTeamMembers()
                    ->teamInvitation()
                    ->allowTenants()
                    ->checkAccountStatusInLogin()
                    ->APITokenManager()
                    ->editProfile()
                    ->editPassword()
                    ->browserSessionManager()
                    ->deleteAccount()
                    ->editProfileMenu()
                    ->registration(),
            )
            ->middleware([
                EncryptCookies::class,
                AddQueuedCookiesToResponse::class,
                StartSession::class,
                AuthenticateSession::class,
                ShareErrorsFromSession::class,
                VerifyCsrfToken::class,
                SubstituteBindings::class,
                DisableBladeIconComponents::class,
                DispatchServingFilamentEvent::class,
            ])
            ->authMiddleware([
                Authenticate::class,
            ]);
    }
}
</file>

<file path="tests/src/DebugTest.php">
<?php

it('will not use debugging functions', function () {
    expect(['dd', 'dump', 'ray'])->each->not->toBeUsed();
});
</file>

<file path=".gitignore">
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/storage/pail
/vendor
.env
.env.backup
.env.production
.phpactor.json
.phpunit.result.cache
.DS_Store
Homestead.json
Homestead.yaml
auth.json
npm-debug.log
yarn-error.log
/.fleet
/.idea
/.vscode
/.zed
</file>

<file path="CHANGELOG.md">
# V1.0.0

First release of the package
</file>

<file path="CODE_OF_CONDUCT.md">
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.
</file>

<file path="LICENSE.md">
The MIT License (MIT)

Copyright (c)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
</file>

<file path="phpunit.xml">
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         backupGlobals="false"
         bootstrap="vendor/autoload.php"
         colors="true"
         processIsolation="false"
         stopOnFailure="false"
         xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/10.3/phpunit.xsd"
         cacheDirectory=".phpunit.cache"
         backupStaticProperties="false"
>
    <testsuites>
        <testsuite name="Tests">
            <directory suffix=".php">./tests/</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory suffix=".php">./src</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="self-testing"/>
        <env name="APP_KEY" value="base64:yk+bUVuZa1p86Dqjk9OjVK2R1pm6XHxC6xEKFq8utH0="/>
        <env name="DB_CONNECTION" value="sqlite"/>
        <env name="DB_DATABASE" value="/vendor/tomatophp/filament-saas-panel/tests/database/database.sqlite"/>
    </php>
</phpunit>
</file>

<file path="SECURITY.md">
# Security Policy

If you discover any security related issues, please email info@3x1.io instead of using the issue tracker.
</file>

<file path=".github/FUNDING.yml">
github: [fadymondy]
</file>

<file path="config/filament-saas-panel.php">
<?php

return [
    /**
     * --------------------------------------------------------------
     * Panel ID
     * --------------------------------------------------------------
     *
     * This is the ID of the panel.
     */
    'id' => 'app',

    /**
     * --------------------------------------------------------------
     * Panel Pages
     * --------------------------------------------------------------
     *
     * This is where you can define the pages that will be used in the panel.
     */
    'pages' => [
        'teams' => [
            'create' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\CreateTeam::class,
            'edit' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam::class,
        ],
        'profile' => [
            'edit' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile::class,
        ],
        'auth' => [
            'login' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth\LoginAccount::class,
            'register' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth\RegisterAccount::class,
            'register-without-otp' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth\RegisterAccountWithoutOTP::class,
        ],
    ],

    /**
     * --------------------------------------------------------------
     * Auth Guard
     * --------------------------------------------------------------
     *
     * This is the guard that will be used to authenticate the user.
     */
    'auth_guard' => 'web',

    /**
     * --------------------------------------------------------------
     * User Model
     * --------------------------------------------------------------
     *
     * This is the model that will be used to interact with the user.
     */
    'user_model' => \App\Models\User::class,

    /**
     * --------------------------------------------------------------
     * User Table
     * --------------------------------------------------------------
     *
     * This is the table that will be used to interact with the user.
     */
    'user_table' => 'users',

    /**
     * --------------------------------------------------------------
     * Team Model
     * --------------------------------------------------------------
     *
     * This is the model that will be used to interact with the team.
     */
    'team_model' => \App\Models\Team::class,

    /**
     * --------------------------------------------------------------
     * Team ID Column
     * --------------------------------------------------------------
     *
     * This is the column that will be used to identify the team owner.
     */
    'team_id_column' => 'user_id',

    /**
     * --------------------------------------------------------------
     * Team Invitation Model
     * --------------------------------------------------------------
     *
     * This is the model that will be used to interact with the team invitation.
     */
    'team_invitation_model' => \App\Models\TeamInvitation::class,

    /**
     * --------------------------------------------------------------
     * Membership Model
     * --------------------------------------------------------------
     *
     * This is the model that will be used to interact with the membership.
     */
    'membership_model' => \App\Models\Membership::class,

    /**
     * --------------------------------------------------------------
     * Registration URL
     * --------------------------------------------------------------
     *
     * This is the URL that will be used to register a new user.
     */
    'registration_url' => 'register',

    /**
     * --------------------------------------------------------------
     * Registration URL
     * --------------------------------------------------------------
     *
     * This is the URL that will be used to register a new user.
     */
    'login_url' => 'login',

    /**
     * --------------------------------------------------------------
     * Team Invitation Mail
     * --------------------------------------------------------------
     *
     * This is the mail that will be used to send the team invitation.
     */
    'team_invitation_mail' => \TomatoPHP\FilamentSaasPanel\Mail\TeamInvitation::class,

    /**
     * --------------------------------------------------------------
     * Team Invitation Mail View
     * --------------------------------------------------------------
     *
     * This is the view that will be used to send the team invitation.
     */
    'team_invitation_mail_view' => 'filament-saas-panel::emails.team-invitation',

    /**
     * --------------------------------------------------------------
     * OTP Rate Limit
     * --------------------------------------------------------------
     *
     * This is the rate limit for the OTP.
     */
    'otp_rate_limit' => 5,

    /**
     * --------------------------------------------------------------
     * Throttle OTP
     * --------------------------------------------------------------
     *
     * This is the throttle for the OTP.
     */
    'throttle_otp' => 5,
];
</file>

<file path="resources/views/emails/team-invitation.blade.php">
@component('mail::message')
{{ __('You have been invited to join the :team team!', ['team' => $invitation->team->name]) }}

@if (Laravel\Fortify\Features::enabled(Laravel\Fortify\Features::registration()))
{{ __('If you do not have an account, you may create one by clicking the button below. After creating an account, you may click the invitation acceptance button in this email to accept the team invitation:') }}

@component('mail::button', ['url' => filament()->getCurrentPanel()->getId() . '/' . config('filament-saas-panel.registration_url')])
{{ __('Create Account') }}
@endcomponent

{{ __('If you already have an account, you may accept this invitation by clicking the button below:') }}

@else
{{ __('You may accept this invitation by clicking the button below:') }}
@endif


@component('mail::button', ['url' => $acceptUrl])
{{ __('Accept Invitation') }}
@endcomponent

{{ __('If you did not expect to receive an invitation to this team, you may discard this email.') }}
@endcomponent
</file>

<file path="resources/views/forms/components/browser-sessions.blade.php">
<x-dynamic-component
    :component="$getFieldWrapperView()"
    :field="$field"
>
    <div x-data="{ state: $wire.$entangle('{{ $getStatePath() }}') }">
        <div class="">
            <div class="mt-4 text-sm text-gray-600">
                <div class="text-sm text-gray-600 dark:text-gray-400">
                    {{ trans('filament-saas-panel::messages.profile.browser.sessions_content') }}
                </div>
                @if (count($data) > 0)
                    <div style="display: flex; flex-direction: column; gap: 10px;">
                        @foreach ($data as $session)
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    @if ($session->device['desktop'])
                                        <x-filament::icon
                                            icon="heroicon-o-computer-desktop"
                                            class="fi-size-lg fi-circular"
                                        />
                                    @else
                                        <x-filament::icon
                                            icon="heroicon-o-device-phone-mobile"
                                            class="fi-size-lg fi-circular"
                                        />
                                    @endif
                                </div>

                                <div style="display: flex; flex-direction: column; gap: 10px;">
                                    <div class="text-sm text-gray-600 dark:text-gray-400">
                                        {{ $session->device['platform'] ? $session->device['platform'] : __('Unknown') }} - {{ $session->device['browser'] ? $session->device['browser'] : __('Unknown') }}
                                    </div>

                                    <div>
                                        <div style="font-size: 12px; color: #6b7280;">
                                            {{ $session->ip_address }},

                                            @if ($session->is_current_device)
                                                <span class="font-semibold text-primary-500">{{ trans('filament-saas-panel::messages.profile.browser.sessions_device') }}</span>
                                            @else
                                                {{ trans('filament-saas-panel::messages.profile.browser.sessions_last_active') }} {{ $session->last_active }}
                                            @endif
                                        </div>
                                    </div>
                                </div>
                            </div>
                        @endforeach
                    </div>
                @endif

            </div>
        </div>
    </div>
</x-dynamic-component>
</file>

<file path="resources/views/forms/components/delete-account-description.blade.php">
<x-dynamic-component
    :component="$getFieldWrapperView()"
    :field="$field"
>
    <div x-data="{ state: $wire.$entangle('{{ $getStatePath() }}') }">
        <div class="text-left">
            <div class="mt-4 text-sm text-gray-600">
                {{ trans('filament-saas-panel::messages.profile.delete.delete_account_card_description') }}
            </div>
        </div>
    </div>
</x-dynamic-component>
</file>

<file path="resources/views/forms/components/delete-team-description.blade.php">
<x-dynamic-component
    :component="$getFieldWrapperView()"
    :field="$field"
>
    <div x-data="{ state: $wire.$entangle('{{ $getStatePath() }}') }">
        <div class="text-start">
            <div class="mt-4 text-sm text-gray-600">
                {{ trans('filament-saas-panel::messages.profile.delete-team.body') }}
            </div>
        </div>
    </div>
</x-dynamic-component>
</file>

<file path="resources/views/forms/components/team-members.blade.php">
<div class="col-span-6">
    <div class="max-w-xl text-sm text-gray-600">
        {{ trans('filament-saas-panel::messages.teams.members.team-members') }}
    </div>
</div>
</file>

<file path="resources/views/forms/components/team-owner.blade.php">
@php
    $user = config('filament-saas-panel.user_model')::find($team->owner->id);
@endphp
<!-- Team Owner Information -->
<div class="col-span-6">
    <label>
        {{ trans('filament-saas-panel::messages.teams.edit.owner') }}
    </label>

    <div class="fi-sidebar-item-btn" style="margin-left: -10px;">
        <div class="fi-user-menu-trigger">
            <x-filament::avatar
                class="fi-size-lg fi-circular"
                :src="$user->getFilamentAvatarUrl()?: 'https://ui-avatars.com/api/?name='.$user->name.'&color=FFFFFF&background=020617'"
                :alt="$user->name"
                size="lg"
            />
        </div>
        <div class="fi-sidebar-item-label">
            <div class="font-meduim text-md">
                {{ $user->name }}
            </div>
            <div class="text-xs text-gray-400">
                {{ $user->email }}
            </div>
        </div>
    </div>
</div>
</file>

<file path="resources/views/livewire/otp.blade.php">
<div class="fi-simple-page">
    @livewire('notifications')

    <section style="max-width: 400px; margin: 0 auto;">
        <x-filament-panels::header.simple
            :heading="$this->getHeading()"
            :logo="true"
            :subheading="$this->getSubHeading()"
        />

        <form wire:submit="authenticate" style="max-width: 400px; margin: 0 auto; padding: 20px 0 20px 0;">
            {{ $this->form }}

            <div
                style="display: flex; justify-content: center; align-items: center; margin-top: 20px;"
            >
                <x-filament::actions
                    :actions="$this->getCachedFormActions()"
                    alignment="center"
                />
            </div>
        </form>
    </section>
</div>
</file>

<file path="resources/views/teams/edit-profile.blade.php">
<x-filament-panels::page>
    <form wire:submit="updateProfile">
        {{ $this->editProfileForm }}
    </form>

    @if(filament()->getPlugin('filament-saas-panel')->editPassword)
        <form wire:submit="updatePassword">
            {{ $this->editPasswordForm }}
        </form>
    @endif

    @if(filament()->getPlugin('filament-saas-panel')->browserSessionManager)
        <form>
            {{ $this->browserSessionsForm }}
        </form>
    @endif

    @if(filament()->getPlugin('filament-saas-panel')->deleteAccount)
        <form>
            {{ $this->deleteAccountForm }}
        </form>
    @endif
</x-filament-panels::page>
</file>

<file path="resources/views/teams/edit-team.blade.php">
<x-filament-panels::page>
    @if(auth(config('filament-saas-panel.auth_guard'))->user()->id === $team->{config('filament-saas-panel.team_id_column')})
        <form wire:submit="saveEditTeam">
            {{ $this->editTeamForm }}
        </form>
    @endif
    @if(filament()->getPlugin('filament-saas-panel')->teamInvitation && auth(config('filament-saas-panel.auth_guard'))->user()->id === $team->{config('filament-saas-panel.team_id_column')})
        <form wire:submit="sendInvitation">
            {{ $this->manageTeamMembersForm }}
        </form>


        @if ($team->teamInvitations->isNotEmpty())
            <x-filament::section
                :heading="__('Team Member Invitations')"
                :description="__('All of the people that are part of this team.')"
            >
                <!-- Team Member Invitations -->
                <div class="mt-10 sm:mt-0">
                    <div style="display: flex; flex-direction: column; gap: 10px;">
                        @foreach ($team->teamInvitations as $invitation)
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div class="fi-account-widget-main">{{ $invitation->email }}</div>

                                <div class="fi-account-widget-logout-form">
                                    {{ $this->getResendInvitationAction()(['invitation'=>$invitation->id]) }}
                                    {{ $this->getCancelTeamInvitationAction()(['invitation'=>$invitation->id]) }}
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>
            </x-filament::section>
        @endif
    @endif

    @if(filament()->getPlugin('filament-saas-panel')->showTeamMembers)
        @if ($team->users->isNotEmpty())
            <x-filament::section
                :heading="trans('filament-saas-panel::messages.teams.members.list.title')"
                :description="trans('filament-saas-panel::messages.teams.members.list.description')"
            >
                <!-- Team Member Invitations -->
                <div class="mt-10 sm:mt-0">
                    <div class="space-y-6">
                        @foreach ($team->users->sortBy('name') as $user)
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div class="fi-sidebar-item-btn" style="margin-left: -10px;">
                                    <div class="fi-user-menu-trigger">
                                        <x-filament::avatar
                                            class="fi-size-lg fi-circular"
                                            :src="$user->getFilamentAvatarUrl()?: 'https://ui-avatars.com/api/?name='.$user->name.'&color=FFFFFF&background=020617'"
                                            :alt="$user->name"
                                            size="lg"
                                        />
                                    </div>
                                    <div class="fi-sidebar-item-label">
                                        <div class="font-meduim text-md">
                                            {{ $user->name }}
                                        </div>
                                        <div class="text-xs text-gray-400">
                                            {{ $user->email }}
                                        </div>
                                    </div>
                                </div>

                                <div class="flex items-center gap-4">
                                    <!-- Manage Team Member Role -->
                                    @if (auth(config('filament-saas-panel.auth_guard'))->user()->id === \Filament\Facades\Filament::getTenant()->{config('filament-saas-panel.team_id_column')} && Laravel\Jetstream\Jetstream::hasRoles() && $user->membership->role)
                                        {{ ($this->getManageRoleAction(Laravel\Jetstream\Jetstream::findRole($user->membership->role)->name))(['user' => $user->id, 'role'=>$user->membership->role]) }}
                                    @elseif (Laravel\Jetstream\Jetstream::hasRoles() && $user->membership->role)
                                        <div class="ms-2 text-sm text-gray-400">
                                            {{ Laravel\Jetstream\Jetstream::findRole($user->membership->role)->name }}
                                        </div>
                                    @endif

                                    <!-- Leave Team -->
                                    @if (auth(config('filament-saas-panel.auth_guard'))->user()->id === $user->id)
                                        {{ ($this->getLeavingTeamAction())(['user'=> $user->id]) }}

                                    <!-- Remove Team Member -->
                                    @elseif (auth(config('filament-saas-panel.auth_guard'))->user()->id === \Filament\Facades\Filament::getTenant()->account_id)
                                        {{ ($this->getRemoveMemberAction())(['user'=> $user->id]) }}
                                    @endif
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>
            </x-filament::section>
        @endif
    @endif

    @if(filament()->getPlugin('filament-saas-panel')->deleteTeam && auth(config('filament-saas-panel.auth_guard'))->user()->id === $team->{config('filament-saas-panel.team_id_column')})
        <form wire:submit="deleteTeam">
            {{ $this->deleteTeamFrom }}
        </form>
    @endif

    <x-filament-actions::modals />
</x-filament-panels::page>
</file>

<file path="routes/web.php">
<?php

use Illuminate\Support\Facades\Route;

Route::get('otp', \TomatoPHP\FilamentSaasPanel\Livewire\Otp::class)
    ->middleware('web', 'throttle:'.config('filament-saas-panel.throttle_otp'))
    ->name('otp');

Route::get('/users/team-invitations/{invitation}/accept', [\TomatoPHP\FilamentSaasPanel\Http\Controllers\TeamsController::class, 'accept'])
    ->middleware(['web', 'auth:'.config('filament-saas-panel.auth_guard')])
    ->name('team-invitations.accept');

Route::get('/users/team-invitations/{invitation}/cancel', [\TomatoPHP\FilamentSaasPanel\Http\Controllers\TeamsController::class, 'cancel'])
    ->middleware(['web', 'auth:'.config('filament-saas-panel.auth_guard')])
    ->name('team-invitations.cancel');
</file>

<file path="src/Actions/Jetstream/CreateTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Jetstream;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Validator;
use Laravel\Jetstream\Contracts\CreatesTeams;
use Laravel\Jetstream\Events\AddingTeam;

class CreateTeam implements CreatesTeams
{
    /**
     * Validate and create a new team for the given user.
     *
     * @param  array<string, string>  $input
     */
    public function create(mixed $user, array $input): Model
    {
        Validator::make($input, [
            'name' => ['required', 'string', 'max:255'],
        ])->validateWithBag('createTeam');

        AddingTeam::dispatch($user);

        $user->switchTeam($team = $user->ownedTeams()->create([
            'name' => $input['name'],
            'personal_team' => false,
        ]));

        $user->current_team_id = $team->id;
        $user->teams()->attach([$team->id]);

        return $team;
    }
}
</file>

<file path="src/Actions/Jetstream/InviteTeamMember.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Jetstream;

use Closure;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Query\Builder;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Laravel\Jetstream\Contracts\InvitesTeamMembers;
use Laravel\Jetstream\Events\InvitingTeamMember;
use Laravel\Jetstream\Jetstream;
use Laravel\Jetstream\Rules\Role;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class InviteTeamMember implements InvitesTeamMembers
{
    /**
     * Invite a new team member to the given team.
     */
    public function invite(Model $user, Model $team, string $email, ?string $role = null): void
    {
        Gate::forUser($user)->authorize('addTeamMember', $team);

        $this->validate($team, $email, $role);

        InvitingTeamMember::dispatch($team, $email, $role);

        $invitation = $team->teamInvitations()->create([
            'email' => $email,
            'role' => $role,
        ]);

        $mail = config('filament-saas-panel.team_invitation_mail');

        Mail::to($email)->send(new $mail($invitation));
    }

    /**
     * Validate the invite member operation.
     */
    protected function validate(Model $team, string $email, ?string $role): void
    {
        Validator::make([
            'email' => $email,
            'role' => $role,
        ], $this->rules($team), [
            'email.unique' => __('This user has already been invited to the team.'),
        ])->after(
            $this->ensureUserIsNotAlreadyOnTeam($team, $email)
        )->validateWithBag('addTeamMember');
    }

    /**
     * Get the validation rules for inviting a team member.
     */
    protected function rules(Model $team): array
    {
        return array_filter([
            'email' => [
                'required', 'email',
                Rule::unique('team_invitations')->where(function (Builder $query) use ($team) {
                    $query->where('team_id', $team->id);
                }),
            ],
            'role' => Jetstream::hasRoles()
                            ? ['required', 'string', new Role]
                            : null,
        ]);
    }

    /**
     * Ensure that the user is not already on the team.
     */
    protected function ensureUserIsNotAlreadyOnTeam(Model $team, string $email): Closure
    {
        return function ($validator) use ($team, $email) {
            $validator->errors()->addIf(
                $team->hasUserWithEmail($email),
                'email',
                __('This user already belongs to the team.')
            );
        };
    }
}
</file>

<file path="src/Actions/Jetstream/UpdateTeamName.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Actions\Jetstream;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Validator;
use Laravel\Jetstream\Contracts\UpdatesTeamNames;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class UpdateTeamName implements UpdatesTeamNames
{
    /**
     * Validate and update the given team's name.
     *
     * @param  array<string, string>  $input
     */
    public function update(Model $user, Model $team, array $input): void
    {
        Gate::forUser($user)->authorize('update', arguments: $team);

        Validator::make($input, [
            'name' => ['required', 'string', 'max:255'],
        ])->validateWithBag('updateTeamName');

        $team->forceFill([
            'name' => $input['name'],
        ])->save();
    }
}
</file>

<file path="src/Filament/Forms/BrowserSessionsForm.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Forms;

use Carbon\Carbon;
use Filament\Actions\Action;
use Filament\Forms;
use Filament\Notifications\Notification;
use Filament\Schemas\Components\Section;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Laravel\Jetstream\Agent;

class BrowserSessionsForm
{
    public static function get(): array
    {
        return [
            Section::make(trans('filament-saas-panel::messages.profile.browser.browser_section_title'))
                ->description(trans('filament-saas-panel::messages.profile.browser.browser_section_description'))
                ->schema([
                    Forms\Components\ViewField::make('browserSessions')
                        ->label(__(trans('filament-saas-panel::messages.profile.browser.browser_section_title')))
                        ->hiddenLabel()
                        ->view('filament-saas-panel::forms.components.browser-sessions')
                        ->viewData(['data' => self::getSessions()]),
                    Action::make('deleteBrowserSessions')
                        ->label(trans('filament-saas-panel::messages.profile.browser.browser_sessions_log_out'))
                        ->requiresConfirmation()
                        ->modalHeading(trans('filament-saas-panel::messages.profile.browser.browser_sessions_log_out'))
                        ->modalDescription(trans('filament-saas-panel::messages.profile.browser.browser_sessions_confirm_pass'))
                        ->modalSubmitActionLabel(trans('filament-saas-panel::messages.profile.browser.browser_sessions_log_out'))
                        ->schema([
                            Forms\Components\TextInput::make('password')
                                ->password()
                                ->revealable()
                                ->label(trans('filament-saas-panel::messages.profile.browser.password'))
                                ->required(),
                        ])
                        ->action(function (array $data) {
                            self::logoutOtherBrowserSessions($data['password']);

                            Notification::make()
                                ->title('Success')
                                ->success()
                                ->send();
                        })
                        ->modalWidth('2xl'),

                ]),
        ];
    }

    public static function getSessions(): array
    {
        if (config(key: 'session.driver') !== 'database') {
            return [];
        }

        return collect(
            value: DB::connection(config(key: 'session.connection'))->table(table: config(key: 'session.table', default: 'sessions'))
                ->where(column: 'user_id', operator: Auth::user()->getAuthIdentifier())
                ->latest(column: 'last_activity')
                ->get()
        )->map(callback: function ($session): object {
            $agent = self::createAgent($session);

            return (object) [
                'device' => [
                    'browser' => $agent->browser(),
                    'desktop' => $agent->isDesktop(),
                    'mobile' => $agent->isMobile(),
                    'tablet' => $agent->isTablet(),
                    'platform' => $agent->platform(),
                ],
                'ip_address' => $session->ip_address,
                'is_current_device' => $session->id === request()->session()->getId(),
                'last_active' => Carbon::createFromTimestamp($session->last_activity)->diffForHumans(),
            ];
        })->toArray();
    }

    protected static function createAgent(mixed $session)
    {
        return tap(
            value: new Agent,
            callback: fn ($agent) => $agent->setUserAgent(userAgent: $session->user_agent)
        );
    }

    public static function logoutOtherBrowserSessions($password): void
    {

        if (! Hash::check($password, Auth::user()->password)) {
            Notification::make()
                ->danger()
                ->title(trans('filament-saas-panel::messages.profile.browser.incorrect_password'))
                ->send();

            return;
        }

        Auth::guard()->logoutOtherDevices($password);

        request()->session()->put([
            'password_hash_'.Auth::getDefaultDriver() => Auth::user()->getAuthPassword(),
        ]);

        self::deleteOtherSessionRecords();
    }

    protected static function deleteOtherSessionRecords()
    {
        if (config('session.driver') !== 'database') {
            return;
        }

        DB::connection(config('session.connection'))->table(config('session.table', 'sessions'))
            ->where('user_id', Auth::user()->getAuthIdentifier())
            ->where('id', '!=', request()->session()->getId())
            ->delete();
    }
}
</file>

<file path="src/Filament/Forms/DeleteAccountForm.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Forms;

use Filament\Actions\Action;
use Filament\Forms;
use Filament\Notifications\Notification;
use Filament\Schemas\Components\Section;
use Illuminate\Support\Facades\Hash;

class DeleteAccountForm
{
    public static function get(): array
    {
        return [
            Section::make(trans('filament-saas-panel::messages.profile.delete.delete_account'))
                ->description(trans('filament-saas-panel::messages.profile.delete.delete_account_description'))
                ->schema([
                    Forms\Components\ViewField::make('deleteAccount')
                        ->label(__('Delete Account'))
                        ->hiddenLabel()
                        ->view('filament-saas-panel::forms.components.delete-account-description'),
                    Action::make('deleteAccount')
                        ->label(trans('filament-saas-panel::messages.profile.delete.delete_account'))
                        ->icon('heroicon-m-trash')
                        ->color('danger')
                        ->requiresConfirmation()
                        ->modalHeading(trans('filament-saas-panel::messages.profile.delete.delete_account'))
                        ->modalDescription(trans('filament-saas-panel::messages.profile.delete.are_you_sure'))
                        ->modalSubmitActionLabel(trans('filament-saas-panel::messages.profile.delete.yes_delete_it'))
                        ->schema([
                            Forms\Components\TextInput::make('password')
                                ->password()
                                ->revealable()
                                ->label(trans('filament-saas-panel::messages.profile.delete.password'))
                                ->required(),
                        ])
                        ->action(function (array $data) {

                            if (! Hash::check($data['password'], auth('accounts')->user()->password)) {
                                self::sendErrorDeleteAccount(trans('filament-saas-panel::messages.profile.delete.incorrect_password'));

                                return;
                            }

                            auth('accounts')->user()?->update([
                                'is_active' => false,
                            ]);

                            auth('accounts')->user()?->delete();
                        }),
                ]),
        ];
    }

    public static function sendErrorDeleteAccount(string $message): void
    {
        Notification::make()
            ->danger()
            ->title($message)
            ->send();
    }
}
</file>

<file path="src/Filament/Forms/DeleteTeamForm.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Forms;

use Filament\Actions\Action;
use Filament\Facades\Filament;
use Filament\Forms;
use Filament\Notifications\Notification;
use Filament\Schemas\Components\Section;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;

class DeleteTeamForm
{
    public static function get($team): array
    {
        return [
            Section::make(trans('filament-saas-panel::messages.profile.delete-team.title'))
                ->description(trans('filament-saas-panel::messages.profile.delete-team.description'))
                ->schema([
                    Forms\Components\ViewField::make('deleteTeam')
                        ->label(__('Delete Team'))
                        ->hiddenLabel()
                        ->view('filament-saas-panel::forms.components.delete-team-description'),
                    Action::make('deleteAccount')
                        ->label(trans('filament-saas-panel::messages.profile.delete-team.delete'))
                        ->icon('heroicon-m-trash')
                        ->color('danger')
                        ->requiresConfirmation()
                        ->modalHeading(trans('filament-saas-panel::messages.profile.delete-team.delete_account'))
                        ->modalDescription(trans('filament-saas-panel::messages.profile.delete-team.are_you_sure'))
                        ->modalSubmitActionLabel(trans('filament-saas-panel::messages.profile.delete-team.yes_delete_it'))
                        ->schema([
                            Forms\Components\TextInput::make('password')
                                ->password()
                                ->revealable()
                                ->label(trans('filament-saas-panel::messages.profile.delete-team.password'))
                                ->required(),
                        ])
                        ->action(function (array $data) use ($team) {

                            if (! Hash::check($data['password'], Auth::user()->password)) {
                                self::sendErrorDeleteAccount(trans('filament-saas-panel::messages.profile.delete-team.incorrect_password'));

                                return;
                            }

                            $team?->delete();

                            Notification::make()
                                ->title('Team deleted')
                                ->body('The team has been deleted successfully.')
                                ->success()
                                ->send();

                            return redirect()->to(url(Filament::getCurrentPanel()->getId()));
                        }),
                ]),
        ];
    }

    public static function sendErrorDeleteAccount(string $message): void
    {
        Notification::make()
            ->danger()
            ->title($message)
            ->send();
    }
}
</file>

<file path="src/Filament/Forms/EditPasswordForm.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Forms;

use Filament\Actions\Action;
use Filament\Forms;
use Filament\Schemas\Components\Section;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class EditPasswordForm
{
    public static function get(): array
    {
        return [
            Section::make(trans('filament-saas-panel::messages.profile.password.title'))
                ->description(trans('filament-saas-panel::messages.profile.password.description'))
                ->schema([
                    Forms\Components\TextInput::make('current_password')
                        ->label(trans('filament-saas-panel::messages.profile.password.current_password'))
                        ->password()
                        ->required()
                        ->currentPassword()
                        ->revealable(),
                    Forms\Components\TextInput::make('password')
                        ->label(trans('filament-saas-panel::messages.profile.password.new_password'))
                        ->password()
                        ->required()
                        ->rule(Password::default())
                        ->autocomplete('new-password')
                        ->dehydrateStateUsing(fn ($state): string => Hash::make($state))
                        ->live(debounce: 500)
                        ->same('passwordConfirmation')
                        ->revealable(),
                    Forms\Components\TextInput::make('passwordConfirmation')
                        ->label(trans('filament-saas-panel::messages.profile.password.confirm_password'))
                        ->password()
                        ->required()
                        ->dehydrated(false)
                        ->revealable(),
                    Action::make('getUpdatePasswordFormActions')
                        ->label(trans('filament-saas-panel::messages.save'))
                        ->submit('editPasswordForm'),
                ]),
        ];
    }
}
</file>

<file path="src/Filament/Forms/EditProfileForm.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Forms;

use Filament\Actions\Action;
use Filament\Forms;
use Filament\Schemas\Components\Section;

class EditProfileForm
{
    public static function get(): array
    {
        return [
            Section::make(trans('filament-saas-panel::messages.profile.edit.title'))
                ->description(trans('filament-saas-panel::messages.profile.edit.description'))
                ->schema([
                    Forms\Components\SpatieMediaLibraryFileUpload::make('avatar')
                        ->avatar()
                        ->alignCenter()
                        ->circleCropper()
                        ->collection('avatar')
                        ->columnSpan(2)
                        ->label(trans('filament-saas-panel::messages.profile.edit.avatar')),
                    Forms\Components\TextInput::make('name')
                        ->columnSpan(2)
                        ->label(trans('filament-saas-panel::messages.profile.edit.name'))
                        ->required(),
                    Forms\Components\TextInput::make('email')
                        ->columnSpan(2)
                        ->label(trans('filament-saas-panel::messages.profile.edit.email'))
                        ->email()
                        ->required()
                        ->unique(ignoreRecord: true),
                    Action::make('getUpdateProfileFormActions')
                        ->label(trans('filament-saas-panel::messages.save'))
                        ->submit('editProfileForm'),
                ]),
        ];
    }
}
</file>

<file path="src/Filament/Forms/ManageTeamMembersForm.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Forms;

use Filament\Actions\Action;
use Filament\Forms;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Illuminate\Database\Query\Builder;
use Illuminate\Validation\Rule;
use Laravel\Jetstream\Jetstream;
use Laravel\Jetstream\Role;

class ManageTeamMembersForm
{
    public static function get($team): array
    {
        return [
            Forms\Components\ViewField::make('manageTeamMembers')
                ->label(trans('filament-saas-panel::messages.teams.members.title'))
                ->hiddenLabel()
                ->view('filament-saas-panel::forms.components.team-members', ['team' => $team]),
            TextInput::make('email')->label('Email')
                ->label(trans('filament-saas-panel::messages.teams.members.email'))
                ->rules([
                    'required',
                    'email',
                    'not_in:'.$team->owner->email,
                    Rule::unique('team_invitations', 'email')
                        ->where(function (Builder $query) use ($team) {
                            $query->where('team_id', $team->id);
                        }),
                ])
                ->validationMessages([
                    'email.not_in' => trans('filament-saas-panel::messages.teams.members.not_in'),
                    'email.required' => trans('filament-saas-panel::messages.teams.members.required'),
                    'email.unique' => trans('filament-saas-panel::messages.teams.members.unique'),
                ])
                ->disabled(fn () => auth(config('filament-saas-panel.auth_guard'))->user()->id !== $team->{config('filament-saas-panel.team_id_column')}),
            Forms\Components\Select::make('role')
                ->label(trans('filament-saas-panel::messages.teams.members.role'))
                ->searchable()
                ->preload()
                ->options(function () {
                    $roles = collect(Jetstream::$roles)->transform(function ($role) {
                        return (new Role(
                            $role->key,
                            $role->name,
                            $role->permissions
                        ))->description($role->description);
                    })->values();

                    return $roles->pluck('name', 'key');
                })
                ->rules(Jetstream::hasRoles()
                    ? ['required', 'string', new \Laravel\Jetstream\Rules\Role]
                    : null, )
                ->validationMessages([
                    'role.required' => trans('filament-saas-panel::messages.teams.members.role_required'),
                ])
                ->disabled(fn () => auth(config('filament-saas-panel.auth_guard'))->user()->id !== $team->{config('filament-saas-panel.team_id_column')}),
            Action::make('sendInvitation')
                ->label(trans('filament-saas-panel::messages.teams.members.send_invitation'))
                ->submit('manageTeamMembersForm')
                ->color('primary'),
        ];
    }

    public static function sendErrorDeleteAccount(string $message): void
    {
        Notification::make()
            ->danger()
            ->title($message)
            ->send();
    }
}
</file>

<file path="src/Filament/Forms/UpdateTeamForm.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Forms;

use Filament\Actions\Action;
use Filament\Forms;
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;

class UpdateTeamForm
{
    public static function get($team): array
    {
        return [
            Forms\Components\ViewField::make('teamOwner')
                ->label(trans('filament-saas-panel::messages.teams.edit.owner'))
                ->hiddenLabel()
                ->view('filament-saas-panel::forms.components.team-owner', ['team' => $team]),
            SpatieMediaLibraryFileUpload::make('avatar')
                ->avatar()
                ->label(trans('filament-saas-panel::messages.teams.edit.avatar'))
                ->disabled(fn () => auth(config('filament-saas-panel.auth_guard'))->user()->id !== $team->{config('filament-saas-panel.team_id_column')})
                ->collection('avatar'),
            TextInput::make('name')
                ->label(trans('filament-saas-panel::messages.teams.edit.name'))
                ->disabled(fn () => auth(config('filament-saas-panel.auth_guard'))->user()->id !== $team->{config('filament-saas-panel.team_id_column')})
                ->required(),
            Action::make('editTeam')
                ->requiresConfirmation()
                ->label(trans('filament-saas-panel::messages.teams.edit.save'))
                ->submit('editTeamForm')
                ->color('primary'),
        ];
    }

    public static function sendErrorDeleteAccount(string $message): void
    {
        Notification::make()
            ->danger()
            ->title($message)
            ->send();
    }
}
</file>

<file path="src/Filament/Pages/Auth/RegisterAccount.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth;

use DanHarrin\LivewireRateLimiting\Exceptions\TooManyRequestsException;
use Filament\Auth\Events\Registered;
use Filament\Auth\Http\Responses\Contracts\RegistrationResponse;
use Filament\Auth\Pages\Register;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Illuminate\Support\Facades\DB;
use TomatoPHP\FilamentSaasPanel\Events\SendOTP;
use TomatoPHP\FilamentSaasPanel\Responses\RegisterResponse;

class RegisterAccount extends Register
{
    protected static ?int $navigationSort = 2;

    public static function isShouldRegisterNavigation(): bool
    {
        return false;
    }

    public static function getLabel(): string
    {
        return 'Create Account';
    }

    /**
     * @return array<int | string, string | Form>
     */
    protected function getForms(): array
    {
        return [
            'form' => $this->form(
                $this->makeForm()
                    ->schema([
                        $this->getNameFormComponent(),
                        $this->getEmailFormComponent(),
                        TextInput::make('phone')->label('Phone')->required()->unique(),
                        TextInput::make('username')->label('Username')->required()->unique(),
                        Hidden::make('loginBy')->default('email'),
                        $this->getPasswordFormComponent(),
                        $this->getPasswordConfirmationFormComponent(),
                    ])
                    ->statePath('data'),
            ),
        ];
    }

    public function register(): ?RegistrationResponse
    {
        try {
            $this->rateLimit(2);
        } catch (TooManyRequestsException $exception) {
            Notification::make()
                ->title(__('filament-panels::pages/auth/register.notifications.throttled.title', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]))
                ->body(array_key_exists('body', __('filament-panels::pages/auth/register.notifications.throttled') ?: []) ? __('filament-panels::pages/auth/register.notifications.throttled.body', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]) : null)
                ->danger()
                ->send();

            return null;
        }

        $user = DB::transaction(function () {
            $data = $this->form->getState();

            return $this->getUserModel()::create($data);
        });

        event(new Registered($user));

        $user->otp_code = substr(number_format(time() * rand(), 0, '', ''), 0, 6);
        $user->save();

        event(new SendOTP(config('filament-saas-panel.user_model'), $user->id));

        session()->put('user_email', $user->email);

        return app(RegisterResponse::class);
    }
}
</file>

<file path="src/Filament/Pages/Auth/RegisterAccountWithoutOTP.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth;

use DanHarrin\LivewireRateLimiting\Exceptions\TooManyRequestsException;
use Filament\Auth\Events\Registered;
use Filament\Auth\Http\Responses\Contracts\RegistrationResponse;
use Filament\Auth\Pages\Register;
use Filament\Facades\Filament;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Filament\Schemas\Schema;
use Illuminate\Support\Facades\DB;

class RegisterAccountWithoutOTP extends Register
{
    protected static ?int $navigationSort = 2;

    public static function isShouldRegisterNavigation(): bool
    {
        return false;
    }

    public static function getLabel(): string
    {
        return 'Create Account';
    }

    /**
     * @return array<int | string, string | Schema>
     */
    protected function getForms(): array
    {
        return [
            'form' => $this->form(
                $this->makeForm()
                    ->schema([
                        $this->getNameFormComponent(),
                        $this->getEmailFormComponent(),
                        TextInput::make('phone')->label('Phone')->required()->unique(),
                        TextInput::make('username')->label('Username')->required()->unique(),
                        Hidden::make('loginBy')->default('email'),
                        $this->getPasswordFormComponent(),
                        $this->getPasswordConfirmationFormComponent(),
                    ])
                    ->statePath('data'),
            ),
        ];
    }

    public function register(): ?RegistrationResponse
    {
        try {
            $this->rateLimit(2);
        } catch (TooManyRequestsException $exception) {
            Notification::make()
                ->title(__('filament-panels::pages/auth/register.notifications.throttled.title', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]))
                ->body(array_key_exists('body', __('filament-panels::pages/auth/register.notifications.throttled') ?: []) ? __('filament-panels::pages/auth/register.notifications.throttled.body', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]) : null)
                ->danger()
                ->send();

            return null;
        }

        $user = DB::transaction(function () {
            $data = $this->form->getState();

            return config('filament-saas-panel.user_model')::create($data);
        });

        event(new Registered($user));

        $user->is_active = true;
        $user->save();

        Filament::auth()->login($user);

        session()->regenerate();

        return app(RegistrationResponse::class);
    }
}
</file>

<file path="src/Filament/Pages/EditProfile/HasBrowserSessions.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile;

use Filament\Schemas\Schema;
use TomatoPHP\FilamentSaasPanel\Filament\Forms\BrowserSessionsForm;

trait HasBrowserSessions
{
    public function browserSessionsForm(Schema $form): Schema
    {
        return $form
            ->schema(BrowserSessionsForm::get());
    }
}
</file>

<file path="src/Filament/Pages/EditProfile/HasDeleteAccount.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile;

use Filament\Schemas\Schema;
use TomatoPHP\FilamentSaasPanel\Filament\Forms\DeleteAccountForm;

trait HasDeleteAccount
{
    public function deleteAccountForm(Schema $form): Schema
    {
        return $form
            ->schema(DeleteAccountForm::get())
            ->model($this->getUser())
            ->statePath('deleteAccountData');
    }
}
</file>

<file path="src/Filament/Pages/EditProfile/HasEditPassword.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile;

use Filament\Actions\Action;
use Filament\Facades\Filament;
use Filament\Schemas\Schema;
use Filament\Support\Exceptions\Halt;
use TomatoPHP\FilamentSaasPanel\Filament\Forms\EditPasswordForm;

trait HasEditPassword
{
    public function editPasswordForm(Schema $form): Schema
    {
        return $form
            ->schema(EditPasswordForm::get())
            ->model($this->getUser())
            ->statePath('passwordData');
    }

    protected function getUpdatePasswordFormActions(): array
    {
        return [
            Action::make('getUpdatePasswordFormActions')
                ->label(trans('filament-saas-panel::messages.save'))
                ->submit('editPasswordForm'),
        ];
    }

    public function updatePassword(): void
    {
        try {
            $data = $this->editPasswordForm->getState();

            $this->handleRecordUpdate($this->getUser(), $data);
        } catch (Halt $exception) {
            return;
        }

        if (request()->hasSession() && array_key_exists('password', $data)) {
            request()->session()->put([
                'password_hash_'.Filament::getAuthGuard() => $data['password'],
            ]);
        }

        $this->editPasswordForm->fill();

        $this->sendSuccessNotification();
    }
}
</file>

<file path="src/Filament/Pages/EditProfile/HasEditProfile.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile;

use Filament\Actions\Action;
use Filament\Schemas\Schema;
use Filament\Support\Exceptions\Halt;
use Illuminate\Database\Eloquent\Model;
use TomatoPHP\FilamentSaasPanel\Filament\Forms\EditProfileForm;

trait HasEditProfile
{
    public function editProfileForm(Schema $form): Schema
    {
        return $form
            ->schema(EditProfileForm::get())
            ->model($this->getUser())
            ->statePath('profileData');
    }

    protected function getUpdateProfileFormActions(): array
    {
        return [
            Action::make('getUpdateProfileFormActions')
                ->label(trans('filament-saas-panel::messages.save'))
                ->submit('editProfileForm'),
        ];
    }

    public function updateProfile(): void
    {
        try {
            $data = $this->editProfileForm->getState();

            $this->handleRecordUpdate($this->getUser(), $data);
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();
    }

    protected function handleRecordUpdate(Model $record, array $data): Model
    {
        $record->update($data);

        return $record;
    }
}
</file>

<file path="src/Filament/Pages/EditTeam/HasCancelTeamInvitation.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam;

use Filament\Actions\Action;
use Filament\Support\Exceptions\Halt;

trait HasCancelTeamInvitation
{
    public function getCancelTeamInvitationAction(): Action
    {
        return Action::make('getCancelTeamInvitationAction')
            ->requiresConfirmation()
            ->color('danger')
            ->label(trans('filament-saas-panel::messages.teams.actions.cancel_invitation'))
            ->action(function (array $arguments) {
                $this->cancelTeamInvitation($arguments['invitation']);
            });
    }

    public function cancelTeamInvitation($invitationId)
    {
        try {
            if (! empty($invitationId)) {
                $model = config('filament-saas-panel.team_invitation_model');

                $model::whereKey($invitationId)->delete();
            }
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();
    }
}
</file>

<file path="src/Filament/Pages/EditTeam/HasDeleteTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam;

use Filament\Facades\Filament;
use Filament\Schemas\Schema;
use TomatoPHP\FilamentSaasPanel\Filament\Forms\DeleteTeamForm;

trait HasDeleteTeam
{
    public function deleteTeamFrom(Schema $form): Schema
    {
        return $form
            ->schema(DeleteTeamForm::get(Filament::getTenant()))
            ->model(Filament::getTenant())
            ->statePath('deleteTeamData');
    }
}
</file>

<file path="src/Filament/Pages/EditTeam/HasEditTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam;

use Filament\Facades\Filament;
use Filament\Schemas\Components\Section;
use Filament\Schemas\Schema;
use Filament\Support\Exceptions\Halt;
use Illuminate\Database\Eloquent\Model;
use TomatoPHP\FilamentSaasPanel\Filament\Forms\UpdateTeamForm;

trait HasEditTeam
{
    public function editTeamForm(Schema $form): Schema
    {
        return $form->schema([
            Section::make(trans('filament-saas-panel::messages.teams.edit.title'))
                ->description(trans('filament-saas-panel::messages.teams.edit.description'))
                ->schema(UpdateTeamForm::get(Filament::getTenant())),
        ])
            ->model(Filament::getTenant())
            ->statePath('editTeamData');
    }

    public function saveEditTeam()
    {
        try {
            $data = $this->editTeamForm->getState();

            $this->handleRecordUpdate(Filament::getTenant(), $data);
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();
    }

    protected function handleRecordUpdate(Model $record, array $data): Model
    {
        $record->update($data);

        return $record;
    }
}
</file>

<file path="src/Filament/Pages/EditTeam/HasLeavingTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam;

use Filament\Actions\Action;
use Filament\Facades\Filament;
use Filament\Support\Exceptions\Halt;
use Laravel\Jetstream\Events\TeamMemberRemoved;

trait HasLeavingTeam
{
    public function getLeavingTeamAction(): Action
    {
        return Action::make('getLeavingTeamAction')
            ->requiresConfirmation()
            ->link()
            ->color('danger')
            ->label(trans('filament-saas-panel::messages.teams.members.leave_team'))
            ->action(function (array $arguments) {
                $this->removeMember($arguments['user']);
            });
    }

    public function getRemoveMemberAction(): Action
    {
        return Action::make('getRemoveMemberAction')
            ->requiresConfirmation()
            ->link()
            ->color('danger')
            ->label(trans('filament-saas-panel::messages.teams.members.remove_member'))
            ->action(function (array $arguments) {
                $this->removeMember($arguments['user']);
            });
    }

    public function removeMember($user)
    {
        $teamMember = config('filament-saas-panel.user_model')::find($user);
        try {
            Filament::getTenant()->removeUser($teamMember);
            TeamMemberRemoved::dispatch(Filament::getTenant(), $teamMember);
            $teamMember->current_team_id = $teamMember->teams()->first()?->id ?? null;
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();

        return redirect()->to(Filament::getCurrentOrDefaultPanel()->getUrl());
    }
}
</file>

<file path="src/Filament/Pages/EditTeam/HasManageRoles.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam;

use Filament\Facades\Filament;
use Filament\Forms\Components\Select;
use Filament\Support\Exceptions\Halt;
use Laravel\Jetstream\Events\TeamMemberUpdated;
use Laravel\Jetstream\Jetstream;
use Laravel\Jetstream\Role;

trait HasManageRoles
{
    public function getManageRoleAction($role = null)
    {
        return \Filament\Actions\Action::make('getManageRoleAction')
            ->requiresConfirmation()
            ->link()
            ->color('info')
            ->label($role)
            ->modelLabel(trans('filament-saas-panel::messages.teams.members.manage_role'))
            ->schema(function (array $arguments) {
                return [
                    Select::make('role')
                        ->default($arguments['role'])
                        ->label(trans('filament-saas-panel::messages.teams.members.role'))
                        ->searchable()
                        ->preload()
                        ->options(function () {
                            $roles = collect(Jetstream::$roles)->transform(function ($role) {
                                return with($role->jsonSerialize(), function ($data) {
                                    return (new Role(
                                        $data['key'],
                                        $data['name'],
                                        $data['permissions']
                                    ))->description($data['description']);
                                });
                            })->values();

                            return $roles->pluck('name', 'key');
                        })
                        ->rules(Jetstream::hasRoles()
                            ? ['required', 'string', new \Laravel\Jetstream\Rules\Role]
                            : null, )
                        ->validationMessages([
                            'role.required' => trans('filament-saas-panel::messages.teams.members.role_required'),
                        ]),
                ];
            })
            ->action(function (array $arguments, array $data) {
                $this->manageRole($arguments['user'], $data['role']);
            });
    }

    public function manageRole(int $id, string $role)
    {
        try {
            Filament::getTenant()->users()->updateExistingPivot($id, [
                'role' => $role,
            ]);

            TeamMemberUpdated::dispatch(Filament::getTenant()->fresh(), Jetstream::findUserByIdOrFail($id));
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();
    }
}
</file>

<file path="src/Filament/Pages/EditTeam/HasManageTeamMembers.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam;

use Filament\Facades\Filament;
use Filament\Schemas\Components\Section;
use Filament\Schemas\Schema;
use TomatoPHP\FilamentSaasPanel\Filament\Forms\ManageTeamMembersForm;

trait HasManageTeamMembers
{
    public function manageTeamMembersForm(Schema $form): Schema
    {
        return $form->schema([
            Section::make(trans('filament-saas-panel::messages.teams.members.title'))
                ->description(trans('filament-saas-panel::messages.teams.members.description'))
                ->schema(ManageTeamMembersForm::get(Filament::getTenant())),
        ])
            ->model(Filament::getTenant())
            ->statePath('manageTeamMembersData');
    }
}
</file>

<file path="src/Filament/Pages/EditTeam/HasTeamInvitation.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam;

use Filament\Actions\Action;
use Filament\Facades\Filament;
use Filament\Notifications\Notification;
use Filament\Support\Exceptions\Halt;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Mail;
use Laravel\Jetstream\Events\InvitingTeamMember;
use Laravel\Jetstream\Jetstream;

trait HasTeamInvitation
{
    public function getResendInvitationAction(): Action
    {
        return Action::make('getResendInvitationAction')
            ->requiresConfirmation()
            ->color('warning')
            ->label(trans('filament-saas-panel::messages.teams.actions.resend_invitation'))
            ->action(function (array $arguments) {
                $this->resendTeamInvitation($arguments['invitation']);
            });
    }

    public function resendTeamInvitation($invitationId)
    {
        try {
            $model = Jetstream::teamInvitationModel();

            $invitation = $model::whereKey($invitationId)->first();

            $mail = config('filament-saas-panel.team_invitation_mail');

            Mail::to($invitation->email)->send(new $mail($invitation));

            $account = config('filament-saas-panel.user_model')::where('email', $invitation->email)->first();

            if ($account) {
                Notification::make()
                    ->title(trans('filament-saas-panel::messages.teams.members.notifications.title'))
                    ->body(trans('filament-saas-panel::messages.teams.members.notifications.body', ['team' => $invitation->team->name]))
                    ->success()
                    ->actions([
                        Action::make('acceptInvitation')
                            ->label(trans('filament-saas-panel::messages.teams.members.notifications.accept'))
                            ->color('success')
                            ->markAsRead()
                            ->url(route('team-invitations.accept', ['invitation' => $invitation->id])),
                        Action::make('cancelInvitation')
                            ->label(trans('filament-saas-panel::messages.teams.members.notifications.cancel'))
                            ->color('danger')
                            ->url(route('team-invitations.cancel', ['invitation' => $invitation->id])),
                    ])
                    ->sendToDatabase($account);
            }
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();
    }

    public function sendInvitation()
    {
        try {
            $data = $this->manageTeamMembersForm->getState();
            $this->manageTeamInvitations(Filament::getTenant(), $data);
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();
    }

    protected function manageTeamInvitations(Model $record, array $data)
    {
        $user = auth(config('filament-saas-panel.auth_guard'))->user();
        $team = $record;
        $email = $data['email'];
        $role = $data['role'];

        InvitingTeamMember::dispatch($team, $email, $role);

        $invitation = $team->teamInvitations()->create([
            'email' => $email,
            'role' => $role,
        ]);

        $mail = config('filament-saas-panel.team_invitation_mail');

        Mail::to($email)->send(new $mail($invitation));

        $account = config('filament-saas-panel.user_model')::where('email', $email)->first();

        if ($account) {
            Notification::make()
                ->title(trans('filament-saas-panel::messages.teams.members.notifications.title'))
                ->body(trans('filament-saas-panel::messages.teams.members.notifications.body', ['team' => $team->name]))
                ->success()
                ->actions([
                    Action::make('acceptInvitation')
                        ->label(trans('filament-saas-panel::messages.teams.members.notifications.accept'))
                        ->color('success')
                        ->markAsRead()
                        ->url(route('accounts.team-invitations.accept', ['invitation' => $invitation->id])),
                    Action::make('cancelInvitation')
                        ->label(trans('filament-saas-panel::messages.teams.members.notifications.cancel'))
                        ->color('danger')
                        ->url(route('accounts.team-invitations.cancel', ['invitation' => $invitation->id])),
                ])
                ->sendToDatabase($account);
        }

    }
}
</file>

<file path="src/Filament/Pages/ApiTokens.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages;

use BackedEnum;
use Filament\Pages\Page;
use Illuminate\Contracts\Support\Htmlable;

class ApiTokens extends Page
{
    protected static string|BackedEnum|null $navigationIcon = 'heroicon-o-key';

    protected string $view = 'filament-saas-panel::teams.api-tokens';

    public static function getNavigationLabel(): string
    {
        return trans('filament-saas-panel::messages.profile.token.title');
    }

    public function getTitle(): string|Htmlable
    {
        return trans('filament-saas-panel::messages.profile.token.title');
    }

    public static function isShouldRegisterNavigation(): bool
    {
        return false;
    }

    public static function shouldRegisterNavigation(): bool
    {
        return false;
    }

    public static function getNavigationSort(): ?int
    {
        return 1;
    }
}
</file>

<file path="src/Filament/Pages/CreateTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages;

use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\TextInput;
use Filament\Pages\Tenancy\RegisterTenant;
use Filament\Schemas\Schema;
use Illuminate\Database\Eloquent\Model;

class CreateTeam extends RegisterTenant
{
    public static function registerNavigationItems()
    {
        return [];
    }

    public static function getCluster() {}

    public static function getLabel(): string
    {
        return 'Create Team';
    }

    public function form(Schema $form): Schema
    {
        return $form
            ->schema([
                FileUpload::make('avatar')
                    ->disk(config('filesystems.default'))
                    ->alignCenter()
                    ->avatar(),
                TextInput::make('name')
                    ->default(auth(config('filament-saas-panel.auth_guard'))->user()->teams()->count() > 0 ? null : auth(config('filament-saas-panel.auth_guard'))->user()->name."'s Team"),
            ]);
    }

    protected function handleRegistration(array $data): Model
    {
        $newTeam = app(\TomatoPHP\FilamentSaasPanel\Actions\Jetstream\CreateTeam::class)
            ->create(auth(config('filament-saas-panel.auth_guard'))->user(), $data);

        if (isset($data['avatar'])) {
            $newTeam->addMediaFromDisk($data['avatar'], config('filesystems.default'))
                ->usingName($data['name'])
                ->toMediaCollection('avatar');
        }

        return $newTeam;
    }
}
</file>

<file path="src/Filament/Pages/EditProfile.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages;

use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Notifications\Notification;
use Filament\Pages\Page;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile\HasBrowserSessions;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile\HasDeleteAccount;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile\HasEditPassword;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile\HasEditProfile;

class EditProfile extends Page implements HasForms
{
    use HasBrowserSessions;
    use HasDeleteAccount;
    use HasEditPassword;
    use HasEditProfile;
    use InteractsWithForms;

    protected string $view = 'filament-saas-panel::teams.edit-profile';

    protected ?string $maxWidth = '6xl';

    public static function shouldRegisterNavigation(): bool
    {
        return false;
    }

    public function getTitle(): string
    {
        return trans('filament-saas-panel::messages.profile.title');
    }

    public static function getNavigationLabel(): string
    {
        return trans('filament-saas-panel::messages.profile.title');
    }

    public static function canAccess(): bool
    {
        return true;
    }

    public static function shouldShowDeleteAccountForm()
    {
        return true;
    }

    public static function shouldShowBrowserSessionsForm()
    {
        return true;
    }

    public static function shouldShowSanctumTokens()
    {
        return true;
    }

    public ?array $profileData = [];

    public ?array $passwordData = [];

    public function mount(): void
    {
        $this->fillForms();
    }

    protected function getForms(): array
    {
        return [
            'editProfileForm',
            'editPasswordForm',
            'deleteAccountForm',
            'browserSessionsForm',
        ];
    }

    protected function fillForms(): void
    {
        $data = $this->getUser()->attributesToArray();

        $this->editProfileForm->fill($data);
        $this->editPasswordForm->fill();
    }

    public function getUser()
    {
        return auth(config('filament-saas-panel.auth_guard'))->user();
    }

    public function sendSuccessNotification()
    {
        Notification::make()
            ->title('Success')
            ->success()
            ->send();
    }
}
</file>

<file path="src/Filament/Pages/EditTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages;

use Filament\Facades\Filament;
use Filament\Pages\Tenancy\EditTenantProfile;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam\HasCancelTeamInvitation;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam\HasDeleteTeam;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam\HasEditTeam;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam\HasLeavingTeam;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam\HasManageRoles;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam\HasManageTeamMembers;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam\HasNotifications;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam\HasTeamInvitation;

class EditTeam extends EditTenantProfile
{
    use HasCancelTeamInvitation;
    use HasDeleteTeam;
    use HasEditTeam;
    use HasLeavingTeam;
    use HasManageRoles;
    use HasManageTeamMembers;
    use HasNotifications;
    use HasTeamInvitation;

    protected string $view = 'filament-saas-panel::teams.edit-team';

    public static function isShouldRegisterNavigation(): bool
    {
        return false;
    }

    public static function getLabel(): string
    {
        return trans('filament-saas-panel::messages.teams.title');
    }

    public ?array $deleteTeamData = [];

    public ?array $editTeamData = [];

    public ?array $manageTeamMembersData = [];

    public function mount(): void
    {
        $this->fillForms();
    }

    protected function getForms(): array
    {
        return [
            'editTeamForm',
            'deleteTeamFrom',
            'manageTeamMembersForm',
        ];
    }

    protected function fillForms(): void
    {
        $data = Filament::getTenant();

        $this->editTeamForm->fill($data->toArray());
        $this->deleteTeamFrom->fill($data->toArray());
        $this->manageTeamMembersForm->fill($data->toArray());
    }

    protected function getViewData(): array
    {
        return [
            'team' => Filament::getTenant(),
        ];
    }
}
</file>

<file path="src/Filament/Resources/TeamResource.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Resources;

use BackedEnum;
use Filament\Actions\BulkActionGroup;
use Filament\Actions\DeleteAction;
use Filament\Actions\DeleteBulkAction;
use Filament\Actions\EditAction;
use Filament\Forms;
use Filament\Resources\Resource;
use Filament\Schemas\Schema;
use Filament\Tables;
use Filament\Tables\Table;
use TomatoPHP\FilamentSaasPanel\Models\Team;

class TeamResource extends Resource
{
    protected static ?string $model = Team::class;

    protected static ?string $recordTitleAttribute = 'name';

    protected static string|BackedEnum|null $navigationIcon = 'heroicon-o-user-group';

    public static function getLabel(): ?string
    {
        return trans('filament-accounts::messages.team.single');
    }

    public static function getNavigationLabel(): string
    {
        return trans('filament-accounts::messages.team.title');
    }

    public static function getPluralLabel(): ?string
    {
        return trans('filament-accounts::messages.team.title');
    }

    public static function getNavigationGroup(): ?string
    {
        return trans('filament-accounts::messages.group');
    }

    public static function form(Schema $form): Schema
    {
        return $form
            ->schema([
                Forms\Components\SpatieMediaLibraryFileUpload::make('avatar')
                    ->label(trans('filament-accounts::messages.team.columns.avatar'))
                    ->hiddenLabel()
                    ->alignCenter()
                    ->avatar()
                    ->collection('avatar')
                    ->image(),
                Forms\Components\TextInput::make('name')
                    ->label(trans('filament-accounts::messages.team.columns.name'))
                    ->required()
                    ->maxLength(255),
                Forms\Components\Select::make('account_id')
                    ->label(trans('filament-accounts::messages.team.columns.owner'))
                    ->relationship('owner', 'name')
                    ->preload()
                    ->searchable(),
                Forms\Components\Toggle::make('personal_team')
                    ->label(trans('filament-accounts::messages.team.columns.personal_team')),
            ])->columns(1);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('owner.name')
                    ->label(trans('filament-accounts::messages.team.columns.owner'))
                    ->sortable(),
                Tables\Columns\ImageColumn::make('avatar')
                    ->circular()
                    ->label(trans('filament-accounts::messages.team.columns.avatar'))
                    ->toggleable(),
                Tables\Columns\TextColumn::make('name')
                    ->label(trans('filament-accounts::messages.team.columns.name'))
                    ->searchable()
                    ->sortable(),
                Tables\Columns\IconColumn::make('personal_team')
                    ->label(trans('filament-accounts::messages.team.columns.personal_team'))
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
                Tables\Columns\TextColumn::make('updated_at')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('owner')
                    ->label(trans('filament-accounts::messages.team.columns.owner'))
                    ->searchable()
                    ->relationship('owner', 'name'),
            ])
            ->recordActions([
                EditAction::make(),
                DeleteAction::make(),
            ])
            ->defaultSort('id', 'desc')
            ->toolbarActions([
                BulkActionGroup::make([
                    DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => \TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource\Pages\ListTeams::route('/'),
        ];
    }
}
</file>

<file path="src/Http/Controllers/TeamsController.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Http\Controllers;

use Filament\Facades\Filament;
use Illuminate\Http\Request;
use Laravel\Jetstream\Events\AddingTeamMember;
use Laravel\Jetstream\Events\TeamMemberAdded;
use Laravel\Jetstream\Jetstream;

class TeamsController
{
    public function accept(Request $request, $invitationId)
    {
        $model = Jetstream::teamInvitationModel();

        $invitation = $model::whereKey($invitationId)->first();

        if ($invitation) {
            $newTeamMember = Jetstream::findUserByEmailOrFail($invitation->email);

            AddingTeamMember::dispatch($invitation->team, $newTeamMember);

            $invitation->team->users()->attach(
                $newTeamMember, ['role' => $invitation->role]
            );

            TeamMemberAdded::dispatch($invitation->team, $newTeamMember);

            $invitation->delete();

            return redirect()->to(url(Filament::getCurrentOrDefaultPanel()->getId().'/'.$invitation->team->id));
        }

        return redirect()->to(url(Filament::getCurrentOrDefaultPanel()->getId()));
    }

    public function cancel(Request $request, $invitationId)
    {
        $model = Jetstream::teamInvitationModel();

        $invitation = $model::whereKey($invitationId)->first();

        if ($invitation) {
            $invitation->delete();
        }

        return redirect()->to(url(Filament::getCurrentOrDefaultPanel()->getId()));
    }
}
</file>

<file path="src/Listeners/CreatePersonalTeam.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Listeners;

use Filament\Auth\Events\Registered;

class CreatePersonalTeam
{
    /**
     * Create the event listener.
     */
    public function __construct()
    {
        //
    }

    /**
     * Handle the event.
     */
    public function handle(Registered $event): void {}
}
</file>

<file path="src/Livewire/Otp.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Livewire;

use Carbon\Carbon;
use DanHarrin\LivewireRateLimiting\Exceptions\TooManyRequestsException;
use DanHarrin\LivewireRateLimiting\WithRateLimiting;
use Filament\Actions\Action;
use Filament\Actions\ActionGroup;
use Filament\Actions\Concerns\InteractsWithActions;
use Filament\Actions\Contracts\HasActions;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Filament\Pages\Concerns\InteractsWithFormActions;
use Filament\Pages\SimplePage;
use Filament\Schemas\Schema;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use TomatoPHP\FilamentSaasPanel\Events\SendOTP;

class Otp extends SimplePage implements HasActions
{
    use InteractsWithActions;
    use InteractsWithFormActions;
    use WithRateLimiting;

    protected string $view = 'filament-saas-panel::livewire.otp';

    /**
     * @var array<string, mixed> | null
     */
    public ?array $data = [];

    public function mount(): void
    {
        if (auth(config('filament-saas-panel.auth_guard'))->check()) {
            redirect()->intended(config('filament-saas-panel.id'));
        }
        if (! session()->has('user_email')) {
            redirect()->to('/login');
        }

        $this->data['email'] = session('user_email');
        $this->form->fill([
            'email' => session('user_email'),
        ]);
    }

    public function form(Schema $form): Schema
    {
        return $form->schema([
            Hidden::make('email'),
            TextInput::make('otp')
                ->hint('Don\'t receive the code?')
                ->hintAction($this->getResendFormAction())
                ->label('OTP Code')
                ->numeric()
                ->maxLength(6)
                ->autocomplete('current-password')
                ->required()
                ->extraInputAttributes(['tabindex' => 2]),
        ])->statePath('data');
    }

    public function resend()
    {
        try {
            $this->rateLimit(5);
        } catch (TooManyRequestsException $exception) {
            Notification::make()
                ->title(__('filament-panels::pages/auth/login.notifications.throttled.title', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]))
                ->body(array_key_exists('body', __('filament-panels::pages/auth/login.notifications.throttled') ?: []) ? __('filament-panels::pages/auth/login.notifications.throttled.body', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]) : null)
                ->danger()
                ->send();

            return null;
        }

        $findAccountWithEmail = config('filament-saas-panel.user_model')::query()
            ->where('email', $this->data['email'])
            ->first();

        if (! $findAccountWithEmail) {
            $this->throwFailureOtpException();
        }

        $findAccountWithEmail->otp_code = rand(100000, 999999);
        $findAccountWithEmail->save();

        event(new SendOTP(config('filament-saas-panel.user_model'), $findAccountWithEmail->id));

        Notification::make()
            ->title('OTP Send')
            ->body('OTP code has been sent to your email address.')
            ->success()
            ->send();

        return null;
    }

    public function authenticate()
    {
        try {
            $this->rateLimit(config('filament-saas-panel.otp_rate_limit'));
        } catch (TooManyRequestsException $exception) {
            Notification::make()
                ->title(__('filament-panels::pages/auth/login.notifications.throttled.title', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]))
                ->body(array_key_exists('body', __('filament-panels::pages/auth/login.notifications.throttled') ?: []) ? __('filament-panels::pages/auth/login.notifications.throttled.body', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]) : null)
                ->danger()
                ->send();

            return null;
        }

        $data = $this->form->getState();

        $findAccountWithEmailAndOTP = config('filament-saas-panel.user_model')::query()
            ->where('email', $data['email'])
            ->where('otp_code', $data['otp'])
            ->first();

        if (! $findAccountWithEmailAndOTP) {
            $this->throwFailureOtpException();
        }

        Auth::guard(config('filament-saas-panel.auth_guard'))->login($findAccountWithEmailAndOTP);

        if ($findAccountWithEmailAndOTP) {
            $findAccountWithEmailAndOTP->otp_code = null;
            $findAccountWithEmailAndOTP->otp_activated_at = Carbon::now();
            $findAccountWithEmailAndOTP->is_active = true;
            $findAccountWithEmailAndOTP->is_login = true;
            $findAccountWithEmailAndOTP->last_login = Carbon::now();
            $findAccountWithEmailAndOTP->save();
        }

        session()->regenerate();

        return redirect()->to(config('filament-saas-panel.id'));
    }

    protected function throwFailureOtpException(): never
    {
        throw ValidationException::withMessages([
            'data.otp' => trans('filament-saas-panel::messages.otp.otp_not_correct'),
        ]);
    }

    public function getTitle(): string|Htmlable
    {
        return trans('filament-saas-panel::messages.otp.title');
    }

    public function getSubHeading(): string
    {
        return trans('filament-saas-panel::messages.otp.subheading');
    }

    public function getHeading(): string|Htmlable
    {
        return trans('filament-saas-panel::messages.otp.heading');
    }

    /**
     * @return array<Action | ActionGroup>
     */
    protected function getFormActions(): array
    {
        return [
            $this->getAuthenticateFormAction(),
        ];
    }

    protected function getAuthenticateFormAction(): Action
    {
        return Action::make('authenticate')
            ->label('Verify OTP')
            ->submit('authenticate');
    }

    protected function getResendFormAction(): Action
    {
        return Action::make('getResendFormAction')
            ->link()
            ->label(trans('filament-saas-panel::messages.otp.resend_otp'))
            ->color('warning')
            ->action('resend');
    }

    protected function hasFullWidthFormActions(): bool
    {
        return true;
    }

    /**
     * @param  array<string, mixed>  $data
     * @return array<string, mixed>
     */
    protected function getCredentialsFromFormData(array $data): array
    {
        return [
            'email' => $data['email'],
            'otp_code' => $data['otp'],
        ];
    }
}
</file>

<file path="src/Livewire/SanctumTokens.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Livewire;

use Carbon\Carbon;
use Filament\Actions\Action;
use Filament\Actions\Concerns\InteractsWithActions;
use Filament\Actions\Contracts\HasActions;
use Filament\Actions\CreateAction;
use Filament\Actions\DeleteAction;
use Filament\Facades\Filament;
use Filament\Forms\Components\CheckboxList;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Notifications\Notification;
use Filament\Support\Enums\Alignment;
use Filament\Tables;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Table;
use Illuminate\Contracts\View\View;
use Laravel\Sanctum\Sanctum;
use Livewire\Component;

class SanctumTokens extends Component implements HasActions, HasForms, HasTable
{
    use InteractsWithActions;
    use InteractsWithForms;
    use InteractsWithTable;

    public $user;

    public ?string $plainTextToken;

    public function mount()
    {
        $this->user = Filament::getCurrentPanel()->auth()->user();
    }

    public function table(Table $table): Table
    {
        $auth = Filament::getCurrentPanel()->auth();

        return $table
            ->query(app(Sanctum::$personalAccessTokenModel)->where([
                ['tokenable_id', '=', $auth->id()],
                ['tokenable_type', '=', get_class($auth->user())],
            ]))
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->label(trans('filament-saas-panel::messages.profile.token.name')),
                Tables\Columns\TextColumn::make('created_at')
                    ->date()
                    ->label(trans('filament-saas-panel::messages.profile.token.created_at'))
                    ->sortable(),
                Tables\Columns\TextColumn::make('expires_at')
                    ->color(fn ($record) => now()->gt($record->expires_at) ? 'danger' : null)
                    ->date()
                    ->label(trans('filament-saas-panel::messages.profile.token.expires_at'))
                    ->sortable(),
            ])
            ->recordActions([
                DeleteAction::make(),
            ])
            ->headerActions([
                CreateAction::make()
                    ->label(trans('filament-saas-panel::messages.profile.token.action_label'))
                    ->modalWidth('md')
                    ->schema([
                        TextInput::make('token_name')
                            ->label(trans('filament-saas-panel::messages.profile.token.name'))
                            ->required(),
                        CheckboxList::make('abilities')
                            ->label(trans('filament-saas-panel::messages.profile.token.abilities'))
                            ->options(function () {
                                return collect(['create', 'view', 'update', 'delete'])->mapWithKeys(function ($item, $key) {
                                    $key = is_string($key) ? $key : strtolower($item);

                                    return [$key => $item];
                                })->toArray();
                            })
                            ->columns(2)
                            ->required(),
                        DatePicker::make('expires_at')
                            ->label(trans('filament-saas-panel::messages.profile.token.expires_at')),
                    ])
                    ->action(function ($data) {
                        $this->plainTextToken = $this->user->createToken(
                            $data['token_name'],
                            array_values($data['abilities']),
                            $data['expires_at'] ? Carbon::createFromFormat('Y-m-d', $data['expires_at']) : null
                        )->plainTextToken;

                        $this->replaceMountedAction('showToken', [
                            'token' => $this->plainTextToken,
                        ]);

                        Notification::make()
                            ->success()
                            ->title(trans('filament-saas-panel::messages.profile.token.create_notification'))
                            ->send();
                    })
                    ->modalHeading(trans('filament-saas-panel::messages.profile.token.modal_heading')),
            ])
            ->emptyStateHeading(trans('filament-saas-panel::messages.profile.token.empty_state_heading'))
            ->emptyStateDescription(trans('filament-saas-panel::messages.profile.token.empty_state_description'));
    }

    public function showTokenAction(): Action
    {
        return Action::make('token')
            ->fillForm(fn (array $arguments) => [
                'token' => $arguments['token'],
            ])
            ->schema([
                TextInput::make('token')
                    ->label(trans('filament-saas-panel::messages.profile.token.token'))
                    ->helperText(trans('filament-saas-panel::messages.profile.token.helper_text')),
            ])
            ->modalHeading(trans('filament-saas-panel::messages.profile.token.modal_heading_2'))
            ->modalIcon('heroicon-o-key')
            ->modalAlignment(Alignment::Center)
            ->modalSubmitAction(false)
            ->modalCancelAction(false)
            ->closeModalByClickingAway(false);
    }

    public function render(): View
    {
        return view('filament-saas-panel::livewire.sanctum-tokens');
    }
}
</file>

<file path="src/Models/Team.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Models;

use Filament\Models\Contracts\HasAvatar;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Laravel\Jetstream\Events\TeamCreated;
use Laravel\Jetstream\Events\TeamDeleted;
use Laravel\Jetstream\Events\TeamUpdated;
use Laravel\Jetstream\Team as JetstreamTeam;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Team extends JetstreamTeam implements HasAvatar, HasMedia
{
    use HasFactory;
    use InteractsWithMedia;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'account_id',
        'name',
        'personal_team',
    ];

    /**
     * The event map for the model.
     *
     * @var array<string, class-string>
     */
    protected $dispatchesEvents = [
        'created' => TeamCreated::class,
        'updated' => TeamUpdated::class,
        'deleted' => TeamDeleted::class,
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'personal_team' => 'boolean',
        ];
    }

    protected $appends = [
        'avatar',
    ];

    public function getFilamentAvatarUrl(): ?string
    {
        return $this->getFirstMediaUrl('avatar') ?: 'https://ui-avatars.com/api/?name='.str($this->name)->replace(' ', '+')->toString().'&color=FFFFFF&background=020617';
    }

    public function getAvatarAttribute(): string
    {
        return $this->getFirstMediaUrl('avatar') ?: 'https://ui-avatars.com/api/?name='.str($this->name)->replace(' ', '+')->toString().'&color=FFFFFF&background=020617';
    }

    public function owner(): BelongsTo
    {
        return $this->belongsTo(config('filament-saas-panel.user_model'), config('filament-saas-panel.team_id_column'));
    }

    public function accounts(): BelongsToMany
    {
        return $this->belongsToMany(config('filament-saas-panel.user_model'), 'team_user', 'team_id', config('filament-saas-panel.team_id_column'));
    }
}
</file>

<file path="src/Responses/RegisterResponse.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Responses;

use Filament\Auth\Http\Responses\Contracts\RegistrationResponse;

class RegisterResponse implements RegistrationResponse
{
    public function toResponse($request)
    {
        return redirect()->to(route('otp'));
    }
}
</file>

<file path="src/Traits/InteractsWithTenant.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Traits;

use Filament\Panel;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;
use Laravel\Fortify\TwoFactorAuthenticatable;
use Laravel\Jetstream\HasProfilePhoto;
use Laravel\Jetstream\HasTeams;
use Laravel\Sanctum\HasApiTokens;
use Spatie\MediaLibrary\InteractsWithMedia;

trait InteractsWithTenant
{
    use HasApiTokens;
    use HasProfilePhoto;
    use HasTeams;
    use InteractsWithMedia;
    use TwoFactorAuthenticatable;

    public function canAccessPanel(Panel $panel): bool
    {
        return true;
    }

    public function getTenants(Panel $panel): Collection
    {
        return $this->teams;
    }

    public function canAccessTenant(Model $tenant): bool
    {
        return $this->teams()->whereKey($tenant)->exists();
    }

    public function getFilamentAvatarUrl(): ?string
    {
        return (! empty($this->getFirstMediaUrl('avatar')) ? url($this->getFirstMediaUrl('avatar')) : null) ?: 'https://ui-avatars.com/api/?name='.str($this->name)->replace(' ', '+')->toString().'&color=FFFFFF&background=020617';
    }
}
</file>

<file path="tests/database/migrations/2024_11_04_112951_create_teams_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('teams', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->string('name');
            $table->boolean('personal_team');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('teams');
    }
};
</file>

<file path="tests/database/migrations/2024_11_04_112953_create_team_user_table.php">
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('team_user', function (Blueprint $table) {
            $table->id();
            $table->foreignId('team_id');
            $table->foreignId('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->string('role')->nullable();
            $table->timestamps();

            $table->unique(['team_id', 'account_id']);
        });

        Schema::table('users', function (Blueprint $table) {
            $table->foreignId('current_team_id')->nullable();
            $table->string('profile_photo_path', 2048)->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('team_user');
    }
};
</file>

<file path="tests/src/PluginTest.php">
<?php

use Filament\Facades\Filament;
use TomatoPHP\FilamentSaasPanel\FilamentSaasPanelPlugin;

it('registers plugin', function () {
    $panel = Filament::getCurrentOrDefaultPanel();

    $panel->plugins([
        FilamentSaasPanelPlugin::make(),
    ]);

    expect($panel->getPlugin('filament-saas-panel'))
        ->not()
        ->toThrow(Exception::class);
});

it('can modify profile menu', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->editProfileMenu($condition);

    expect($plugin->editProfileMenu)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify team slug', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->teamSlug($condition);

    expect($plugin->teamSlug)->toBe($condition);
})->with([
    'slug',
    fn () => 'slug',
]);

it('can modify API Token Manager', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->APITokenManager($condition);

    expect($plugin->APITokenManager)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify Edit team', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->editTeam($condition);

    expect($plugin->editTeam)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify Edit profile', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->editProfile($condition);

    expect($plugin->editProfile)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify Edit password', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->editPassword($condition);

    expect($plugin->editPassword)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify delete account', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->deleteAccount($condition);

    expect($plugin->deleteAccount)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify browser session manager', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->browserSessionManager($condition);

    expect($plugin->browserSessionManager)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify registration', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->registration($condition);

    expect($plugin->registration)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify use Jetstream Team Model', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->useJetstreamTeamModel($condition);

    expect($plugin->useJetstreamTeamModel)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify team Invitation', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->teamInvitation($condition);

    expect($plugin->teamInvitation)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify delete Team', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->deleteTeam($condition);

    expect($plugin->deleteTeam)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify allow tenants', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->allowTenants($condition);

    expect($plugin->allowTenants)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify show Team Members', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->showTeamMembers($condition);

    expect($plugin->showTeamMembers)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify check Account Status In Login', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->checkAccountStatusInLogin($condition);

    expect($plugin->checkAccountStatusInLogin)->toBe($condition);
})->with([
    false,
    fn () => true,
]);

it('can modify use OTP Activation', function ($condition) {
    $plugin = FilamentSaasPanelPlugin::make()
        ->useOTPActivation($condition);

    expect($plugin->useOTPActivation)->toBe($condition);
})->with([
    false,
    fn () => true,
]);
</file>

<file path="tests/src/TestAPIKeysPage.php">
<?php

use function Pest\Laravel\actingAs;
use function Pest\Laravel\get;

beforeEach(function () {
    $account = \TomatoPHP\FilamentSaasPanel\Tests\Models\User::factory()->create();
    $team = $account->teams()->create([
        'user_id' => $account->id,
        'name' => 'Team 1',
        'personal_team' => true,
    ]);
    $account->current_team_id = $team->id;
    $account->save();

    actingAs($account, config('filament-saas-panel.auth_guard'));
});

it('can render api keys page', function () {
    get(\TomatoPHP\FilamentSaasPanel\Filament\Pages\ApiTokens::getUrl(['tenant' => auth(config('filament-saas-panel.auth_guard'))->user()->current_team_id]))->assertOk();
});
</file>

<file path="tests/src/TestCreateTeamPage.php">
<?php

use function Pest\Laravel\actingAs;
use function Pest\Laravel\get;

beforeEach(function () {
    actingAs(\TomatoPHP\FilamentSaasPanel\Tests\Models\User::factory()->create(), config('filament-saas-panel.auth_guard'));
});

it('can render create team page', function () {
    get(url(config('filament-saas-panel.id').'/new'))->assertOk();
});

it('can register new team', function () {

    \Pest\Livewire\livewire(\TomatoPHP\FilamentSaasPanel\Filament\Pages\CreateTeam::class)
        ->fillForm([
            'name' => 'Team 1',
        ])
        ->call('register');

    \Pest\Laravel\assertDatabaseHas(\TomatoPHP\FilamentSaasPanel\Models\Team::class, [
        'name' => 'Team 1',
        'user_id' => auth(config('filament-saas-panel.auth_guard'))->user()->id,
    ]);
});
</file>

<file path="tests/src/TestEditProfilePage.php">
<?php

use function Pest\Laravel\actingAs;
use function Pest\Laravel\get;

beforeEach(function () {
    $account = \TomatoPHP\FilamentSaasPanel\Tests\Models\User::factory()->create();
    $team = $account->teams()->create([
        'user_id' => $account->id,
        'name' => 'Team 1',
        'personal_team' => true,
    ]);
    $account->current_team_id = $team->id;
    actingAs($account, config('filament-saas-panel.auth_guard'));
});

it('can render edit profile page', function () {
    get(\TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile::getUrl(['tenant' => auth(config('filament-saas-panel.auth_guard'))->user()->current_team_id]))->assertOk();
});

it('can edit profile details', function () {
    \Pest\Livewire\livewire(\TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile::class)
        ->fillForm([
            'name' => 'John Doe',
        ], 'editProfileForm')
        ->call('updateProfile');

    \Pest\Laravel\assertDatabaseHas(\TomatoPHP\FilamentSaasPanel\Tests\Models\User::class, [
        'id' => auth(config('filament-saas-panel.auth_guard'))->user()->id,
        'name' => 'John Doe',
    ]);
});

it('can edit profile password', function () {
    \Pest\Livewire\livewire(\TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile::class)
        ->fillForm([
            'current_password' => 'password',
            'password' => 'password123',
            'passwordConfirmation' => 'password123',
        ], 'editPasswordForm')
        ->call('updatePassword');

    \PHPUnit\Framework\assertTrue(auth(config('filament-saas-panel.auth_guard'))->attempt([
        'email' => auth(config('filament-saas-panel.auth_guard'))->user()->email,
        'password' => 'password123',
    ]));
});
</file>

<file path="tests/src/TestEditTeamPage.php">
<?php

use function Pest\Laravel\actingAs;
use function Pest\Laravel\get;

beforeEach(function () {
    $account = \TomatoPHP\FilamentSaasPanel\Tests\Models\User::factory()->create();
    $team = $account->teams()->create([
        'user_id' => $account->id,
        'name' => 'Team 1',
        'personal_team' => true,
    ]);
    $account->current_team_id = $team->id;
    actingAs($account, config('filament-saas-panel.auth_guard'));
});

it('can render edit team page', function () {
    get(\TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam::getUrl(['tenant' => auth(config('filament-saas-panel.auth_guard'))->user()->current_team_id]))->assertOk();
});

it('can edit team details', function () {
    filament()->setTenant(auth(config('filament-saas-panel.auth_guard'))->user()->currentTeam);

    \Pest\Livewire\livewire(\TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam::class)
        ->fillForm([
            'name' => 'Team 2',
        ], 'editTeamForm')
        ->call('saveEditTeam');

    \Pest\Laravel\assertDatabaseHas(\TomatoPHP\FilamentSaasPanel\Models\Team::class, [
        'name' => 'Team 2',
        'user_id' => auth(config('filament-saas-panel.auth_guard'))->user()->id,
    ]);
});
</file>

<file path="tests/src/TestRegisterPage.php">
<?php

use Filament\Facades\Filament;

use function Pest\Laravel\get;

beforeEach(function () {
    config()->set('filament-saas-panel.user_model', \TomatoPHP\FilamentSaasPanel\Tests\Models\User::class);

    config()->set('filament-saas-panel.team_model', \TomatoPHP\FilamentSaasPanel\Tests\Models\Team::class);

    config()->set('filament-saas-panel.auth_guard', 'web');

    $this->panel = Filament::getCurrentOrDefaultPanel();
});

it('can render register page', function () {
    get(url(config('filament-saas-panel.id').'/register'))->assertOk();
});

it('can register', function () {
    \Pest\Livewire\livewire(\TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth\RegisterAccountWithoutOTP::class)
        ->fillForm([
            'name' => 'Fady Mondy',
            'email' => 'info@3x1.io',
            'password' => 'password',
            'passwordConfirmation' => 'password',
        ])
        ->call('register')
        ->assertHasNoFormErrors();

    \Pest\Laravel\assertDatabaseHas(\TomatoPHP\FilamentSaasPanel\Tests\Models\User::class, [
        'name' => 'Fady Mondy',
        'email' => 'info@3x1.io',
    ]);
});
</file>

<file path="tests/src/TestTeamsResource.php">
<?php

use TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource;
use TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource\Pages;
use TomatoPHP\FilamentSaasPanel\Tests\Models\Team;
use TomatoPHP\FilamentSaasPanel\Tests\Models\User;

use function Pest\Laravel\actingAs;
use function Pest\Laravel\get;
use function Pest\Livewire\livewire;

beforeEach(function () {
    actingAs(User::factory()->create(), 'web');

    $panel = filament()->getPanels()['admin'];
    filament()->setCurrentPanel($panel);
});

it('can render teams resource', function () {
    get(TeamResource::getUrl())->assertSuccessful();
});

it('can list teams', function () {
    Team::query()->delete();
    $teams = Team::factory()->count(10)->create();

    livewire(Pages\ListTeams::class)
        ->loadTable()
        ->assertCanSeeTableRecords($teams)
        ->assertCountTableRecords(10);
});

it('can render teams name/avatar column in table', function () {
    Team::factory()->count(10)->create();

    livewire(Pages\ListTeams::class)
        ->loadTable()
        ->assertCanRenderTableColumn('name')
        ->assertCanRenderTableColumn('avatar');
});

it('can render teams list page', function () {
    livewire(Pages\ListTeams::class)->assertSuccessful();
});

it('can render view teams action', function () {
    livewire(Pages\ListTeams::class, [
        'record' => Team::factory()->create(),
    ])
        ->mountAction('view')
        ->assertSuccessful();
});

it('can render team create action', function () {
    livewire(Pages\ListTeams::class)
        ->mountAction('create')
        ->assertSuccessful();
});

it('can render team edit action', function () {
    livewire(Pages\ListTeams::class, [
        'record' => Team::factory()->create(),
    ])
        ->mountAction('edit')
        ->assertSuccessful();
});
</file>

<file path="fadymondy-tomato-saas-panel.md">
---
name: SaaS Panel
slug: fadymondy-tomato-saas-panel
author_slug: fadymondy
categories: [developer-tools]
description: Ready to use SaaS panel with integration of Filament Accounts Builder and JetStream teams
discord_url:
docs_url: https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/README.md
github_repository: tomatophp/filament-saas-panel
has_dark_theme: true
has_translations: true
versions: [3,4]
publish_date: 2024-11-04
---
</file>

<file path="module.json">
{
    "name": "FilamentSaasPanel",
    "alias": "filament-saas-panel",
    "description": {
        "ar": "Ready to use SaaS panel with integration of Filament Accounts Builder and Jetsteam teams",
        "en": "Ready to use SaaS panel with integration of Filament Accounts Builder and Jetsteam teams",
        "gr": "Ready to use SaaS panel with integration of Filament Accounts Builder and Jetsteam teams",
        "sp": "Ready to use SaaS panel with integration of Filament Accounts Builder and Jetsteam teams"
    },
    "keywords": [],
    "priority": 0,
    "providers": [
        "TomatoPHP\\FilamentSaasPanel\\FilamentSaasPanelServiceProvider"
    ],
    "files": [],
    "title": {
        "ar": "SaaS Panel",
        "en": "SaaS Panel",
        "gr": "SaaS Panel",
        "sp": "SaaS Panel"
    },
    "color": "#cc1448",
    "icon": "heroicon-c-users",
    "placeholder": "https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/3x1io-tomato-saas-panel.jpg",
    "type": "plugin",
    "version": "v1.0.1",
    "github" : "https://github.com/tomatophp/filament-saas-panel",
    "docs" : "https://github.com/tomatophp/filament-saas-panel"
}
</file>

<file path="testbench.yaml">
providers:
  - BladeUI\Icons\BladeIconsServiceProvider
  - BladeUI\Heroicons\BladeHeroiconsServiceProvider
  - Filament\Actions\ActionsServiceProvider
  - Filament\FilamentServiceProvider
  - Filament\Forms\FormsServiceProvider
  - Filament\Infolists\InfolistsServiceProvider
  - Filament\Notifications\NotificationsServiceProvider
  - Filament\Support\SupportServiceProvider
  - Laravel\Jetstream\JetstreamServiceProvider
  - Laravel\Fortify\FortifyServiceProvider
  - Spatie\MediaLibrary\MediaLibraryServiceProvider
  - Livewire\LivewireServiceProvider
  - Filament\Schemas\SchemasServiceProvider
  - Filament\Tables\TablesServiceProvider
  - Filament\Widgets\WidgetsServiceProvider
  - Filament\Schemas\SchemasServiceProvider
  - RyanChandler\BladeCaptureDirective\BladeCaptureDirectiveServiceProvider
  - TomatoPHP\FilamentSaasPanel\FilamentSaasPanelServiceProvider
  - TomatoPHP\FilamentSaasPanel\Tests\AdminPanelProvider
  - TomatoPHP\FilamentSaasPanel\Tests\AppPanelProvider
workbench:
  welcome: true
  install: true
  start: /
  guard: testing
  discovers:
    web: true
    api: false
    commands: false
    views: true
</file>

<file path=".github/workflows/dependabot-auto-merge.yml">
name: dependabot-auto-merge
on: pull_request_target

permissions:
  pull-requests: write
  contents: write

jobs:
  dependabot:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:

      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2.4.0
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto-merge Dependabot PRs for semver-minor updates
        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-minor'}}
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Auto-merge Dependabot PRs for semver-patch updates
        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
</file>

<file path=".github/workflows/fix-php-code-styling.yml">
name: 'PHP Code Styling'

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - '**.php'

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.head_ref }}

      - name: Fix PHP code style issues
        uses: aglipanci/laravel-pint-action@v2

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "Format Code"
          commit_user_name: 'GitHub Actions'
</file>

<file path="resources/lang/en/messages.php">
<?php

return [
    'login' => [
        'title' => 'Login',
        'description' => 'Login to your account to continue.',
        'email' => 'Email',
        'password' => 'Password',
        'remember_me' => 'Remember me',
        'active' => 'Your account is not active, please contact the administrator.',
    ],
    'register' => [
        'title' => 'Register',
        'description' => 'Register a new account to continue.',
        'name' => 'Name',
        'email' => 'Email',
        'password' => 'Password',
        'confirm_password' => 'Confirm Password',
    ],
    'profile' => [
        'title' => 'Edit Profile',
        'edit' => [
            'title' => 'Edit Information',
            'description' => "Update your account's profile information and email address.",
            'name' => 'Name',
            'avatar' => 'Avatar',
            'email' => 'Email',
        ],
        'password' => [
            'title' => 'Change Password',
            'description' => 'Ensure your account is using a long, random password to stay secure.',
            'current_password' => 'Current Password',
            'new_password' => 'New Password',
            'confirm_password' => 'Confirm Password',
        ],
        'browser' => [
            'sessions_last_active' => 'Last Active',
            'browser_section_title' => 'Browser Sessions',
            'browser_section_description' => 'Manage and log out your active sessions on other browsers and devices.',
            'browser_sessions_log_out' => 'Log Out Other Browser Sessions',
            'browser_sessions_confirm_pass' => 'Please enter your password to confirm you would like to log out of your other browser sessions across all of your devices.',
            'password' => 'Password',
            'confirm' => 'Confirm',
            'nevermind' => 'Nevermind',
            'browser_sessions_logout_notification' => 'Your browser sessions have been logged out.',
            'browser_sessions_logout_failed_notification' => 'Your password was incorrect.',
            'sessions_device' => 'Device',
            'sessions_content' => 'Connected Devices',
            'incorrect_password' => 'The password you entered was incorrect.',
        ],
        'delete' => [
            'delete_account' => 'Delete Account',
            'delete_account_description' => 'Permanently delete your account.',
            'incorrect_password' => 'The password you entered was incorrect.',
            'are_you_sure' => 'Are you sure you want to delete your account? Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.',
            'yes_delete_it' => 'Yes, delete it',
            'password' => 'Password',
            'delete_account_card_description' => 'Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.',
        ],
        'delete-team' => [
            'title' => 'Delete Team',
            'description' => 'Permanently delete your team.',
            'body' => 'Once a team is deleted, all of its resources and data will be permanently deleted. Before deleting this team, please download any data or information regarding this team that you wish to retain.',
            'delete' => 'Delete Team',
            'delete_account' => 'Delete Team',
            'delete_account_description' => 'Are you sure you want to delete your team? Once your team is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your team.',
            'yes_delete_it' => 'Yes, delete it',
            'password' => 'Password',
            'incorrect_password' => 'The password you entered was incorrect.',
            'are_you_sure' => 'Are you sure you want to delete your team? Once your team is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your team.',
        ],
        'token' => [
            'title' => 'API Tokens',
            'description' => 'API tokens allow third-party services to authenticate with our application on your behalf.',
            'name' => 'Name',
            'created_at' => 'Created At',
            'expires_at' => 'Expires At',
            'abilities' => 'Abilities',
            'action_label' => 'Create Token',
            'create_notification' => 'Token created successfully!',
            'modal_heading' => 'Create Token',
            'empty_state_heading' => 'No tokens',
            'empty_state_description' => 'Create a new token to authenticate with the API.',
            'delete_token' => 'Delete Token',
            'delete_token_description' => 'Are you sure you would like to delete this token?',
            'delete_token_confirmation' => 'Yes, delete it',
            'delete_token_notification' => 'Token deleted successfully!',
            'modal_heading_2' => 'Token Generated Successfully',
            'helper_text' => "You may edit the token below. Make sure to copy it now, as you won't be able to see it again.",
            'token' => 'Token',
        ],
    ],
    'teams' => [
        'title' => 'Team Settings',
        'actions' => [
            'cancel_invitation' => 'Cancel Invitation',
            'resend_invitation' => 'Resend Invitation',
        ],
        'edit' => [
            'title' => 'Edit Team Name',
            'description' => "Update your team's profile information and email address.",
            'name' => 'Name',
            'email' => 'Email',
            'avatar' => 'Avatar',
            'save' => 'Save',
            'owner' => 'Owner',
        ],
        'members' => [
            'title' => 'Invite Team Members',
            'description' => 'Add a new team member to your team, allowing them to collaborate with you.',
            'team-members' => 'Please provide the email address of the person you would like to add to this team.',
            'email' => 'Email',
            'role' => 'Role',
            'send_invitation' => 'Send Invitation',
            'cancel' => 'Cancel',
            'not_in' => 'The email address is already a team member.',
            'required' => 'The email field is required.',
            'unique' => 'The email address is already a team member.',
            'role_required' => 'The role field is required.',
            'notifications' => [
                'title' => 'Team Member Invitation',
                'body' => 'You have been invited to join the :team team.',
                'accept' => 'Accept Invitation',
                'cancel' => 'Cancel Invitation',
            ],
            'leave_team' => 'Leave Team',
            'remove_member' => 'Remove Member',
            'manage_role' => 'Manage Role',
            'list' => [
                'title' => 'Team Members',
                'description' => 'All of the people that are part of this team.',
            ],
        ],
        'delete' => [
            'title' => 'Delete Team',
            'description' => 'Permanently delete your team.',
            'body' => 'Once a team is deleted, all of its resources and data will be permanently deleted. Before deleting this team, please download any data or information regarding this team that you wish to retain.',
            'delete' => 'Delete Team',
            'delete_account' => 'Delete Team',
            'delete_account_description' => 'Are you sure you want to delete your team? Once your team is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your team.',
            'yes_delete_it' => 'Yes, delete it',
            'password' => 'Password',
            'incorrect_password' => 'The password you entered was incorrect.',
            'are_you_sure' => 'Are you sure you want to delete your team? Once your team is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your team.',
        ],
    ],
    'team' => [
        'title' => 'Teams',
        'single' => 'Team',
        'columns' => [
            'avatar' => 'Avatar',
            'name' => 'Name',
            'owner' => 'Owner',
            'personal_team' => 'Personal Team',
        ],
    ],
    'saved_successfully' => 'Saved Successfully',
    'save' => 'Save',
    'actions' => [
        'edit' => [
            'label' => 'Edit Teams',
            'notification' => 'Teams updated successfully',
        ],
    ],
    'column' => [
        'teams' => 'Teams',
    ],
    'filter' => 'Filter By Teams',
    'roles' => [
        'admin' => [
            'name' => 'Admin',
            'description' => 'Admin can manage all the teams and users.',
        ],
        'editor' => [
            'name' => 'Editor',
            'description' => 'Editor can manage the teams and users.',
        ],
        'viewer' => [
            'name' => 'Viewer',
            'description' => 'Viewer can view the teams and users.',
        ],
        'user' => [
            'name' => 'User',
            'description' => 'User can view the teams and users.',
        ],
    ],
    'otp' => [
        'title' => 'OTP Authentication',
        'subheading' => 'Please enter the OTP code sent to your email address.',
        'heading' => 'OTP Authentication',
        'otp_not_correct' => 'OTP not correct',
        'resend_otp' => 'Resend OTP',
    ],
];
</file>

<file path="src/Filament/Pages/Auth/LoginAccount.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth;

use DanHarrin\LivewireRateLimiting\Exceptions\TooManyRequestsException;
use Filament\Auth\Http\Responses\LoginResponse;
use Filament\Auth\Pages\Login;
use Filament\Facades\Filament;
use Filament\Models\Contracts\FilamentUser;
use Filament\Notifications\Notification;
use Illuminate\Validation\ValidationException;

class LoginAccount extends Login
{
    protected static ?int $navigationSort = 2;

    public static function isShouldRegisterNavigation(): bool
    {
        return false;
    }

    public static function getLabel(): string
    {
        return 'Login Account';
    }

    protected function throwFailureActivatedException(): never
    {
        throw ValidationException::withMessages([
            'data.email' => trans('filament-saas-panel::messages.login.active'),
        ]);
    }

    public function authenticate(): ?LoginResponse
    {
        try {
            $this->rateLimit(5);
        } catch (TooManyRequestsException $exception) {
            Notification::make()
                ->title(trans('filament-saas-panel::messages.login.throttled.title', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]))
                ->body(trans('filament-saas-panel::messages.login.throttled.body', [
                    'seconds' => $exception->secondsUntilAvailable,
                    'minutes' => ceil($exception->secondsUntilAvailable / 60),
                ]))
                ->danger()
                ->send();

            return null;
        }

        $data = $this->form->getState();

        if (! auth(config('filament-saas-panel.auth_guard'))->attempt($this->getCredentialsFromFormData($data), $data['remember'] ?? false)) {
            $this->throwFailureValidationException();
        }

        $user = Filament::auth()->user();

        if (! $user->is_active) {
            Filament::auth()->logout();

            $this->throwFailureActivatedException();
        }

        if (
            ($user instanceof FilamentUser) &&
            (! $user->canAccessPanel(Filament::getCurrentOrDefaultPanel()))
        ) {
            Filament::auth()->logout();

            $this->throwFailureValidationException();
        }

        session()->regenerate();

        return app(LoginResponse::class);
    }
}
</file>

<file path="tests/src/Models/Team.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests\Models;

use Filament\Models\Contracts\HasAvatar;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Laravel\Jetstream\Events\TeamCreated;
use Laravel\Jetstream\Events\TeamDeleted;
use Laravel\Jetstream\Events\TeamUpdated;
use Laravel\Jetstream\Team as JetstreamTeam;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;
use TomatoPHP\FilamentSaasPanel\Tests\Database\Factories\TeamFactory;

class Team extends JetstreamTeam implements HasAvatar, HasMedia
{
    use HasFactory;
    use InteractsWithMedia;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'user_id',
        'name',
        'personal_team',
    ];

    /**
     * The event map for the model.
     *
     * @var array<string, class-string>
     */
    protected $dispatchesEvents = [
        'created' => TeamCreated::class,
        'updated' => TeamUpdated::class,
        'deleted' => TeamDeleted::class,
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'personal_team' => 'boolean',
        ];
    }

    protected $appends = [
        'avatar',
    ];

    public function getFilamentAvatarUrl(): ?string
    {
        return $this->getFirstMediaUrl('avatar') ?: null;
    }

    public function getAvatarAttribute(): string
    {
        return $this->getFirstMediaUrl('avatar') ?: 'https://ui-avatars.com/api/?name='.str($this->name)->replace(' ', '+')->toString().'&color=FFFFFF&background=020617';
    }

    public function owner(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function accounts(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'team_user', 'team_id', 'user_id');
    }

    protected static function newFactory(): TeamFactory
    {
        return TeamFactory::new();
    }
}
</file>

<file path="tests/src/Models/User.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests\Models;

use Filament\Models\Contracts\FilamentUser;
use Filament\Models\Contracts\HasAvatar;
use Filament\Models\Contracts\HasTenants;
use Filament\Panel;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Spatie\MediaLibrary\HasMedia;
use TomatoPHP\FilamentSaasPanel\Tests\Database\Factories\UserFactory;
use TomatoPHP\FilamentSaasPanel\Traits\InteractsWithTenant;

class User extends Authenticatable implements FilamentUser, HasAvatar, HasMedia, HasTenants, MustVerifyEmail
{
    use HasFactory;
    use InteractsWithTenant;
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'phone',
        'username',
        'loginBy',
        'type',
        'address',
        'password',
        'profile_photo_path',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
        'two_factor_recovery_codes',
        'two_factor_secret',
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array<int, string>
     */
    protected $appends = [
        'profile_photo_url',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    public function canAccessPanel(Panel $panel): bool
    {
        return true;
    }

    protected static function newFactory(): UserFactory
    {
        return UserFactory::new();
    }
}
</file>

<file path="tests/src/AdminPanelProvider.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests;

use Filament\Http\Middleware\Authenticate;
use Filament\Http\Middleware\DisableBladeIconComponents;
use Filament\Http\Middleware\DispatchServingFilamentEvent;
use Filament\Pages;
use Filament\Panel;
use Filament\PanelProvider;
use Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse;
use Illuminate\Cookie\Middleware\EncryptCookies;
use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken;
use Illuminate\Routing\Middleware\SubstituteBindings;
use Illuminate\Session\Middleware\AuthenticateSession;
use Illuminate\Session\Middleware\StartSession;
use Illuminate\View\Middleware\ShareErrorsFromSession;
use TomatoPHP\FilamentSaasPanel\FilamentSaasTeamsPlugin;

class AdminPanelProvider extends PanelProvider
{
    public function panel(Panel $panel): Panel
    {
        return $panel
            ->id('admin')
            ->path('admin')
            ->login()
            ->pages([
                Pages\Dashboard::class,
            ])
            ->plugin(
                FilamentSaasTeamsPlugin::make()
                    ->allowAccountTeamTableAction()
                    ->allowAccountTeamTableBulkAction()
                    ->allowAccountTeamFilter()
                    ->allowAccountTeamFormComponent()
                    ->allowAccountTeamTableColumn()
            )
            ->middleware([
                EncryptCookies::class,
                AddQueuedCookiesToResponse::class,
                StartSession::class,
                AuthenticateSession::class,
                ShareErrorsFromSession::class,
                VerifyCsrfToken::class,
                SubstituteBindings::class,
                DisableBladeIconComponents::class,
                DispatchServingFilamentEvent::class,
            ])
            ->authMiddleware([
                Authenticate::class,
            ]);
    }
}
</file>

<file path="tests/src/TestLoginPage.php">
<?php

use Filament\Facades\Filament;
use TomatoPHP\FilamentSaasPanel\Tests\Models\Team;

use function Pest\Laravel\get;

beforeEach(function () {
    config()->set('filament-saas-panel.user_model', \TomatoPHP\FilamentSaasPanel\Tests\Models\User::class);

    config()->set('filament-saas-panel.team_model', \TomatoPHP\FilamentSaasPanel\Tests\Models\Team::class);

    config()->set('filament-saas-panel.auth_guard', 'web');

    $this->panel = Filament::getCurrentOrDefaultPanel();
    $this->panel->tenant(Team::class, 'id');
});

it('can render login page', function () {
    get(url(config('filament-saas-panel.id').'/login'))->assertOk();
});

// it('can login', function () {
//     $account = \TomatoPHP\FilamentSaasPanel\Tests\Models\User::factory()->create();
//     $team =Team::create([
//         'user_id' => $account->id,
//         'name' => 'Team 1',
//         'personal_team' => true,
//     ]);
//     $account->current_team_id = $team->id;
//     $account->is_active = true;
//     $account->save();

//     $team->users()->attach($account, ['role' => 'admin']);

//     \Pest\Livewire\livewire(\TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth\LoginAccount::class)
//         ->fillForm([
//             'email' => $account->email,
//             'password' => 'password',
//         ])
//         ->call('authenticate');

//     expect(auth(config('filament-saas-panel.auth_guard'))->check())->toBeTrue();
// });
</file>

<file path="tests/Pest.php">
<?php

use TomatoPHP\FilamentSaasPanel\Tests\TestCase;

uses(TestCase::class)->in(__DIR__);
</file>

<file path=".github/workflows/tests.yml">
name: "Tests"

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - '**.php'
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - master
    paths:
      - '**.php'
      - '.github/workflows/tests.yml'
      - 'phpunit.xml.dist'
      - 'composer.json'
      - 'composer.lock'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        php: [8.4, 8.3, 8.2]
        laravel: [12.*, 11.*]
        stability: [prefer-stable]
        include:
          - laravel: 12.*
            testbench: 10.*
            carbon: 3.*
            collision: 8.*
          - laravel: 11.*
            testbench: 9.*
            carbon: 3.*
            collision: 8.*
        exclude:
          - laravel: 11.*
            php: 8.1
    name: P${{ matrix.php }} - L${{ matrix.laravel }} - ${{ matrix.stability }} - ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: dependencies-laravel-${{ matrix.laravel }}-php-${{ matrix.php }}-composer-${{ hashFiles('composer.json') }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, fileinfo
          coverage: none

      - name: Install Dependencies
        run: |
          echo "::add-matcher::${{ runner.tool_cache }}/php.json"
          echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Install Dependencies
        run: |
          composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" "nesbot/carbon:${{ matrix.carbon }}" "nunomaduro/collision:${{ matrix.collision }}" --no-interaction --no-update
          composer update --${{ matrix.stability }} --prefer-dist --no-interaction
          composer db

      - name: Execute tests
        run: vendor/bin/pest
</file>

<file path="src/FilamentSaasPanelServiceProvider.php">
<?php

namespace TomatoPHP\FilamentSaasPanel;

use Filament\Auth\Events\Registered;
use Filament\Events\TenantSet;
use Filament\Livewire\Notifications;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\ServiceProvider;
use Laravel\Fortify\Fortify;
use Laravel\Jetstream\Jetstream;
use Livewire\Livewire;
use TomatoPHP\FilamentSaasPanel\Listeners\CreatePersonalTeam;
use TomatoPHP\FilamentSaasPanel\Listeners\SwitchTeam;
use TomatoPHP\FilamentSaasPanel\Livewire\Otp;
use TomatoPHP\FilamentSaasPanel\Livewire\SanctumTokens;

class FilamentSaasPanelServiceProvider extends ServiceProvider
{
    public function register(): void
    {
        // Register generate command
        $this->commands([
            \TomatoPHP\FilamentSaasPanel\Console\FilamentSaasPanelInstall::class,
        ]);

        // Register Config file
        $this->mergeConfigFrom(__DIR__.'/../config/filament-saas-panel.php', 'filament-saas-panel');

        // Publish Config
        $this->publishes([
            __DIR__.'/../config/filament-saas-panel.php' => config_path('filament-saas-panel.php'),
        ], 'filament-saas-panel-config');

        // Register Migrations
        $this->loadMigrationsFrom(__DIR__.'/../database/migrations');

        // Publish Migrations
        $this->publishes([
            __DIR__.'/../database/migrations' => database_path('migrations'),
        ], 'filament-saas-panel-migrations');
        // Register views
        $this->loadViewsFrom(__DIR__.'/../resources/views', 'filament-saas-panel');

        // Publish Views
        $this->publishes([
            __DIR__.'/../resources/views' => resource_path('views/vendor/filament-saas-panel'),
        ], 'filament-saas-panel-views');

        // Register Langs
        $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'filament-saas-panel');

        // Publish Lang
        $this->publishes([
            __DIR__.'/../resources/lang' => base_path('lang/vendor/filament-saas-panel'),
        ], 'filament-saas-panel-lang');

        // Register Routes
        $this->loadRoutesFrom(__DIR__.'/../routes/web.php');

        $this->publishes([
            __DIR__.'/../publish/migrations/create_teams_table.php' => database_path('migrations/'.date('Y_m_d_His', ((int) time()) + 1).'_create_teams_table.php'),
            __DIR__.'/../publish/migrations/create_team_invitations_table.php' => database_path('migrations/'.date('Y_m_d_His', ((int) time()) + 2).'_create_team_invitations_table.php'),
            __DIR__.'/../publish/migrations/create_team_user_table.php' => database_path('migrations/'.date('Y_m_d_His', ((int) time()) + 3).'_create_team_user_table.php'),
        ], 'filament-saas-teams-migrations');

        $this->publishes([
            __DIR__.'/../publish/Team.php' => app_path('Models/Team.php'),
            __DIR__.'/../publish/TeamInvitation.php' => app_path('Models/TeamInvitation.php'),
            __DIR__.'/../publish/Membership.php' => app_path('Models/Membership.php'),
        ], 'filament-saas-teams-models');

        if (class_exists(Jetstream::class)) {
            Jetstream::useUserModel(config('filament-saas-panel.user_model'));
            Jetstream::useTeamModel(config('filament-saas-panel.team_model'));
            Jetstream::useMembershipModel(config('filament-saas-panel.membership_model'));
            Jetstream::useTeamInvitationModel(config('filament-saas-panel.team_invitation_model'));
            Jetstream::$registersRoutes = false;
            Fortify::$registersRoutes = false;

            Jetstream::defaultApiTokenPermissions(['read']);
        }

        Livewire::component('sanctum-tokens', SanctumTokens::class);
        Livewire::component('otp', Otp::class);
        Livewire::component('notifications', Notifications::class);
    }

    public function boot(): void
    {
        $this->configurePermissions();
    }

    /**
     * Configure the permissions that are available within the application.
     */
    protected function configurePermissions(): void
    {
        Jetstream::role('admin', trans('filament-saas-panel::messages.roles.admin.name'), [
            'create',
            'read',
            'update',
            'delete',
        ])->description(trans('filament-saas-panel::messages.roles.admin.description'));

        Jetstream::role('user', trans('filament-saas-panel::messages.roles.user.name'), [
            'read',
            'update',
        ])->description(trans('filament-saas-panel::messages.roles.user.description'));

        Jetstream::permissions([
            'create',
            'read',
            'update',
            'delete',
        ]);

        /**
         * Disable Fortify routes
         */
        Fortify::$registersRoutes = false;

        /**
         * Disable Jetstream routes
         */
        Jetstream::$registersRoutes = false;

        /**
         * Listen and create personal team for new accounts
         */
        Event::listen(
            Registered::class,
            CreatePersonalTeam::class,
        );

        /**
         * Listen and switch team if tenant was changed
         */
        Event::listen(
            TenantSet::class,
            SwitchTeam::class,
        );
    }
}
</file>

<file path="src/FilamentSaasTeamsPlugin.php">
<?php

namespace TomatoPHP\FilamentSaasPanel;

use Filament\Contracts\Plugin;
use Filament\Panel;
use TomatoPHP\FilamentSaasPanel\Filament\Resources\TeamResource;

class FilamentSaasTeamsPlugin implements Plugin
{
    public function getId(): string
    {
        return 'filament-saas-teams';
    }

    public bool $allowAccountTeamTableAction = false;

    public bool $allowAccountTeamTableBulkAction = false;

    public bool $allowAccountTeamFilter = false;

    public bool $allowAccountTeamFormComponent = false;

    public bool $allowAccountTeamTableColumn = false;

    public function allowAccountTeamTableAction(bool $allowAccountTeamTableAction = true): self
    {
        $this->allowAccountTeamTableAction = $allowAccountTeamTableAction;

        return $this;
    }

    public function allowAccountTeamTableBulkAction(bool $allowAccountTeamTableBulkAction = true): self
    {
        $this->allowAccountTeamTableBulkAction = $allowAccountTeamTableBulkAction;

        return $this;
    }

    public function allowAccountTeamFilter(bool $allowAccountTeamFilter = true): self
    {
        $this->allowAccountTeamFilter = $allowAccountTeamFilter;

        return $this;
    }

    public function allowAccountTeamFormComponent(bool $allowAccountTeamFormComponent = true): self
    {
        $this->allowAccountTeamFormComponent = $allowAccountTeamFormComponent;

        return $this;
    }

    public function allowAccountTeamTableColumn(bool $allowAccountTeamTableColumn = true): self
    {
        $this->allowAccountTeamTableColumn = $allowAccountTeamTableColumn;

        return $this;
    }

    public function register(Panel $panel): void
    {
        $panel->resources([
            TeamResource::class,
        ]);
    }

    public function boot(Panel $panel): void
    {
        //
    }

    public static function make(): FilamentSaasTeamsPlugin
    {
        return new FilamentSaasTeamsPlugin;
    }
}
</file>

<file path="tests/database/factories/TeamFactory.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests\Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use TomatoPHP\FilamentSaasPanel\Tests\Models\Team;
use TomatoPHP\FilamentSaasPanel\Tests\Models\User;

class TeamFactory extends Factory
{
    protected $model = Team::class;

    public function definition(): array
    {
        $user = User::factory()->create();

        return [
            'name' => $this->faker->name(),
            'personal_team' => false,
            'user_id' => $user->id,
        ];
    }
}
</file>

<file path="composer.json">
{
    "name": "tomatophp/filament-saas-panel",
    "type": "library",
    "description": "Ready to use SaaS panel with integration of Filament Accounts Builder and JetStream teams",
    "keywords": [
        "php",
        "laravel",
        "jetsteam",
        "fortify",
        "filament-plugin",
        "panel",
        "saas",
        "teams"
    ],
    "license": "MIT",
    "autoload": {
        "psr-4": {
            "TomatoPHP\\FilamentSaasPanel\\": "src/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "TomatoPHP\\FilamentSaasPanel\\Tests\\": "tests/src/",
            "TomatoPHP\\FilamentSaasPanel\\Tests\\Database\\Factories\\": "tests/database/factories"
        }
    },
    "extra": {
        "laravel": {
            "providers": [
                "TomatoPHP\\FilamentSaasPanel\\FilamentSaasPanelServiceProvider"
            ]
        }
    },
    "authors": [
        {
            "name": "Fady Mondy",
            "email": "info@3x1.io"
        }
    ],
    "config": {
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "phpstan/extension-installer": true
        }
    },
    "scripts": {
        "testbench": "vendor/bin/testbench package:discover --ansi",
        "db": "vendor/bin/testbench package:create-sqlite-db && vendor/bin/testbench migrate",
        "analyse": "vendor/bin/phpstan analyse src tests",
        "test": "vendor/bin/pest",
        "test-coverage": "vendor/bin/pest --coverage",
        "format": "vendor/bin/pint"
    },
    "require": {
        "php": "^8.2|^8.3|^8.4",
        "tomatophp/console-helpers": "^1.1",
        "filament/filament": "^4.0",
        "laravel/jetstream": "*",
        "laravel/sanctum": "*",
        "filament/spatie-laravel-media-library-plugin": "^4.0"
    },
    "require-dev": {
        "larastan/larastan": "^2.9||^3.0",
        "laravel/pint": "^1.14",
        "nunomaduro/collision": "^8.1.1||^7.10.0",
        "orchestra/testbench": "^10.0.0||^9.0.0",
        "pestphp/pest": "^3.0",
        "pestphp/pest-plugin-arch": "^3.0",
        "pestphp/pest-plugin-laravel": "^3.0",
        "pestphp/pest-plugin-livewire": "^3.0",
        "pestphp/pest-plugin-type-coverage": "^3.5",
        "phpstan/extension-installer": "^1.3||^2.0",
        "phpstan/phpstan-deprecation-rules": "^1.1||^2.0",
        "phpstan/phpstan-phpunit": "^1.3||^2.0"
    },
    "version": "v4.0.0"
}
</file>

<file path="src/FilamentSaasPanelPlugin.php">
<?php

namespace TomatoPHP\FilamentSaasPanel;

use Filament\Actions\Action;
use Filament\Contracts\Plugin;
use Filament\Panel;
use TomatoPHP\FilamentSaasPanel\Filament\Pages\ApiTokens;

class FilamentSaasPanelPlugin implements Plugin
{
    public function getId(): string
    {
        return 'filament-saas-panel';
    }

    public ?string $authGuard = 'web';

    public bool $editProfileMenu = false;

    public string $teamSlug = 'id';

    public bool $APITokenManager = false;

    public bool $editTeam = false;

    public bool $editProfile = false;

    public bool $editPassword = false;

    public bool $deleteAccount = false;

    public bool $browserSessionManager = false;

    public bool $registration = false;

    public bool $useJetstreamTeamModel = false;

    public bool $teamInvitation = false;

    public bool $deleteTeam = false;

    public bool $allowTenants = false;

    public bool $showTeamMembers = false;

    public bool $checkAccountStatusInLogin = false;

    public bool $useOTPActivation = false;

    public function allowTenants(bool $allowTenants = true): static
    {
        $this->allowTenants = $allowTenants;

        return $this;
    }

    public function teamSlug(string $teamSlug): static
    {
        $this->teamSlug = $teamSlug;

        return $this;
    }

    public function useOTPActivation(bool $useOTPActivation = true): static
    {
        $this->useOTPActivation = $useOTPActivation;

        return $this;
    }

    public function checkAccountStatusInLogin(bool $checkAccountStatusInLogin = true): static
    {
        $this->checkAccountStatusInLogin = $checkAccountStatusInLogin;

        return $this;
    }

    public function showTeamMembers(bool $showTeamMembers = true): static
    {
        $this->showTeamMembers = $showTeamMembers;

        return $this;
    }

    public function teamInvitation(bool $teamInvitation = true): static
    {
        $this->teamInvitation = $teamInvitation;

        return $this;
    }

    public function deleteTeam(bool $deleteTeam = true): static
    {
        $this->deleteTeam = $deleteTeam;

        return $this;
    }

    public function useJetstreamTeamModel(bool $useJetstreamTeamModel = true): static
    {
        $this->useJetstreamTeamModel = $useJetstreamTeamModel;

        return $this;
    }

    public function editProfileMenu(bool $editProfileMenu = true): static
    {
        $this->editProfileMenu = $editProfileMenu;

        return $this;
    }

    public function APITokenManager(bool $APITokenManager = true): static
    {
        $this->APITokenManager = $APITokenManager;

        return $this;
    }

    public function editTeam(bool $editTeam = true): static
    {
        $this->editTeam = $editTeam;

        return $this;
    }

    public function editProfile(bool $editProfile = true): static
    {
        $this->editProfile = $editProfile;

        return $this;
    }

    public function editPassword(bool $editPassword = true): static
    {
        $this->editPassword = $editPassword;

        return $this;
    }

    public function deleteAccount(bool $deleteAccount = true): static
    {
        $this->deleteAccount = $deleteAccount;

        return $this;
    }

    public function browserSessionManager(bool $browserSessionManager = true): static
    {
        $this->browserSessionManager = $browserSessionManager;

        return $this;
    }

    public function registration(bool $registration = true): static
    {
        $this->registration = $registration;

        return $this;
    }

    public function register(Panel $panel): void
    {
        $pages = [];

        if ($this->allowTenants) {
            $panel
                ->tenant(config('filament-saas-panel.team_model'), $this->teamSlug)
                ->tenantRegistration(config('filament-saas-panel.pages.teams.create'));

            $pages[] = config('filament-saas-panel.pages.teams.create');
        }

        $menuItems = [];

        if ($this->editProfile) {
            $pages[] = config('filament-saas-panel.pages.profile.edit');

            if ($this->editProfileMenu) {
                if ($this->allowTenants) {
                    $panel->userMenuItems([
                        'profile' => fn (Action $action) => $action
                            ->label(fn (): string => auth(config('filament-saas-panel.auth_guard'))->user()?->name)
                            ->icon('heroicon-s-user')
                            ->url(fn (): string => filament()->getTenant() ? config('filament-saas-panel.pages.profile.edit')::getUrl() : '#'),
                    ]
                    );
                } else {
                    $panel->userMenuItems([
                        'profile' => fn (Action $action) => $action
                            ->label(fn (): string => auth(config('filament-saas-panel.auth_guard'))->user()?->name)
                            ->icon('heroicon-s-user')
                            ->url(fn (): string => config('filament-saas-panel.pages.profile.edit')::getUrl()),
                    ]);
                }

            }
        }

        if ($this->APITokenManager) {
            $pages[] = ApiTokens::class;

            if ($this->editProfileMenu) {
                $menuItems[] = Action::make('apiTokens')
                    ->label(fn (): string => ApiTokens::getNavigationLabel())
                    ->icon('heroicon-s-lock-closed')
                    ->url(fn (): string => ApiTokens::getUrl());
            }
        }

        if ($this->editTeam) {
            $panel->livewireComponents([
                config('filament-saas-panel.pages.teams.edit'),
            ]);
            $panel->tenantProfile(config('filament-saas-panel.pages.teams.edit'));
        }

        if ($this->checkAccountStatusInLogin) {
            $panel->login(config('filament-saas-panel.pages.auth.login'));
        }

        if ($this->registration) {
            $panel->registration(config('filament-saas-panel.pages.auth.register-without-otp'));
        }

        if ($this->useOTPActivation) {
            $panel->registration(config('filament-saas-panel.pages.auth.register'));
        }

        $panel->tenantMenuItems($menuItems)
            ->authGuard($this->authGuard)
            ->pages($pages);

    }

    public function boot(Panel $panel): void {}

    public static function make(): FilamentSaasPanelPlugin
    {
        return new FilamentSaasPanelPlugin;
    }
}
</file>

<file path="README.md">
![Screenshot](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/fadymondy-tomato-saas-panel.jpg)

# Filament SaaS Panel

[![Dependabot Updates](https://github.com/tomatophp/filament-saas-panel/actions/workflows/dependabot/dependabot-updates/badge.svg)](https://github.com/tomatophp/filament-saas-panel/actions/workflows/dependabot/dependabot-updates)
[![PHP Code Styling](https://github.com/tomatophp/filament-saas-panel/actions/workflows/fix-php-code-styling.yml/badge.svg)](https://github.com/tomatophp/filament-saas-panel/actions/workflows/fix-php-code-styling.yml)
[![Tests](https://github.com/tomatophp/filament-saas-panel/actions/workflows/tests.yml/badge.svg)](https://github.com/tomatophp/filament-saas-panel/actions/workflows/tests.yml)
[![Latest Stable Version](https://poser.pugx.org/tomatophp/filament-saas-panel/version.svg)](https://packagist.org/packages/tomatophp/filament-saas-panel)
[![License](https://poser.pugx.org/tomatophp/filament-saas-panel/license.svg)](https://packagist.org/packages/tomatophp/filament-saas-panel)
[![Downloads](https://poser.pugx.org/tomatophp/filament-saas-panel/d/total.svg)](https://packagist.org/packages/tomatophp/filament-saas-panel)

Ready to use SaaS panel with integration of Filament Accounts Builder and JetStream teams

## Features

- [x] Login Page
- [x] Register with OTP
- [x] Login Check if Account Active or Blocked
- [x] Create Team Page
- [x] Edit Team Page
- [x] Team Members List
- [x] Team Invitation
- [x] Delete Team
- [x] Edit Profile
- [x] Change Profile Password
- [x] Browser Session Manager
- [x] Delete Account
- [x] API Tokens
- [x] Team Resource
- [ ] Integration With Filament Social Login
- [ ] Integration With Filament Two Factory Authentication
- [ ] Integration With Wave Themes/Plugins

## Screenshot Teams

![Team List](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/teams-list.png)
![Create Team](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/create-team.png)
![Edit Team](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/edit-team.png)

## Screenshot Account Team Components

![Account Team Form Component](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/team-form.png)
![Account Team Table Column](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/team-table.png)
![Account Team Table Action](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/teams-action.png)


## Screenshots Auth Process

![Login](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/login.png)
![OTP Screen](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/otp.png)
![Register](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/register.png)
![Create Tenant](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/create-tenant.png)

## Screenshot Panel

![Panel](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/panel.png)
![Panel Tenant Menu](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/panel-tenant-menu.png)

## Screenshot Edit Teams

![Team Invite](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/team-invite.png)
![Team Members](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/team-members.png)
![Team Settings](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/team-settings.png)
![Team Settings Not Owner](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/team-settings-not-owner.png)

## Screenshots Edit Profile

![Edit Profile](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/edit-profile.png)
![Change Password](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/change-password.png)
![Delete Modal](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/delete-modal.png)
![Logout Modal](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/logout-modal.png)
![Session & Delete Account](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/session-delete.png)

## Screenshot API Tokens

![API Tokens](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/api-tokens.png)
![Create Token](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/create-token.png)
![Token Modal](https://raw.githubusercontent.com/tomatophp/filament-saas-panel/master/arts/token-modal.png)

## Installation

```bash
composer require tomatophp/filament-saas-panel
```

now you need to publish teams migration

```bash
php artisan vendor:publish --tag="filament-saas-teams-migrations"
```

after install your package please run this command

```bash
php artisan filament-saas-panel:install
```

now you need to publish teams models and account model with injection of teams

```bash
php artisan vendor:publish --tag="filament-saas-teams-models"
```

create a new panel for `app`

```bash
php artisan filament:panel app
```

finally register the plugin on `/app/Providers/Filament/AppPanelProvider.php`

```php
->plugin(
    \TomatoPHP\FilamentSaasPanel\FilamentSaasPanelPlugin::make()
        ->editTeam()
        ->deleteTeam()
        ->showTeamMembers()
        ->teamInvitation()
        ->allowTenants()
        ->checkAccountStatusInLogin()
        ->APITokenManager()
        ->editProfile()
        ->editPassword()
        ->browserSessionManager()
        ->deleteAccount()
        ->editProfileMenu()
        ->registration()
        ->useOTPActivation()
)
```

on your admin panel provider if you like to have Team resource and features register this

```php
->plugin(
    \TomatoPHP\FilamentSaasPanel\FilamentSaasTeamsPlugin::make()
)
```

## Use On Existing User Model

if you have `User.php` published on your `/app/Models` folder and you don't need to publish it again just add this trait to your model

```php
use \TomatoPHP\FilamentSaasPanel\Traits\InteractsWithTenant;
```

and implament this interfaces

```php
use Filament\Models\Contracts\HasTenants;
use Filament\Models\Contracts\FilamentUser;
use Filament\Models\Contracts\HasAvatar;
use Spatie\MediaLibrary\HasMedia;

class User extends Authenticatable implements FilamentUser, HasAvatar, HasMedia, HasTenants
{

}
```

## Change Panel ID

if you like to change the panel name on your config just change `id` and `name` on `config/filament-saas-panel.php`

```php
return [
    "id" => "user"
];
```

you can publish it from this command

```bash
php artisan vendor:publish --tag="filament-saas-panel-config"
```

## Custom Pages

you can change any page you want on the panel using the config like this

```php
'pages' => [
    'teams' => [
        'create' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\CreateTeam::class,
        'edit' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\EditTeam::class,
    ],
    'profile' => [
        'edit' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\EditProfile::class,
    ],
    'auth' => [
        'login' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth\LoginAccount::class,
        'register' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth\RegisterAccount::class,
        'register-without-otp' => \TomatoPHP\FilamentSaasPanel\Filament\Pages\Auth\RegisterAccountWithoutOTP::class,
    ],
],
```

## Publish Assets

you can publish config file by use this command

```bash
php artisan vendor:publish --tag="filament-saas-panel-config"
```

you can publish views file by use this command

```bash
php artisan vendor:publish --tag="filament-saas-panel-views"
```

you can publish languages file by use this command

```bash
php artisan vendor:publish --tag="filament-saas-panel-lang"
```

you can publish migrations file by use this command

```bash
php artisan vendor:publish --tag="filament-saas-panel-migrations"
```

## Testing

if you like to run `PEST` testing just use this command

```bash
composer test
```

## Code Style

if you like to fix the code style just use this command

```bash
composer format
```

## PHPStan

if you like to check the code by `PHPStan` just use this command

```bash
composer analyse
```

## Other Filament Packages

Checkout our [Awesome TomatoPHP](https://github.com/tomatophp/awesome)
</file>

<file path="tests/src/TestCase.php">
<?php

namespace TomatoPHP\FilamentSaasPanel\Tests;

use BladeUI\Heroicons\BladeHeroiconsServiceProvider;
use BladeUI\Icons\BladeIconsServiceProvider;
use Filament\Actions\ActionsServiceProvider;
use Filament\Facades\Filament;
use Filament\FilamentServiceProvider;
use Filament\Forms\FormsServiceProvider;
use Filament\Infolists\InfolistsServiceProvider;
use Filament\Notifications\NotificationsServiceProvider;
use Filament\Panel;
use Filament\Schemas\SchemasServiceProvider;
use Filament\Support\SupportServiceProvider;
use Filament\Tables\TablesServiceProvider;
use Filament\Widgets\WidgetsServiceProvider;
use Illuminate\Foundation\Testing\LazilyRefreshDatabase;
use Laravel\Fortify\FortifyServiceProvider;
use Laravel\Jetstream\Jetstream;
use Laravel\Jetstream\JetstreamServiceProvider;
use Livewire\LivewireServiceProvider;
use Orchestra\Testbench\Attributes\WithEnv;
use Orchestra\Testbench\Concerns\WithWorkbench;
use Orchestra\Testbench\TestCase as BaseTestCase;
use RyanChandler\BladeCaptureDirective\BladeCaptureDirectiveServiceProvider;
use Spatie\MediaLibrary\MediaLibraryServiceProvider;
use TomatoPHP\FilamentSaasPanel\FilamentSaasPanelServiceProvider;
use TomatoPHP\FilamentSaasPanel\Tests\Models\Membership;
use TomatoPHP\FilamentSaasPanel\Tests\Models\Team;
use TomatoPHP\FilamentSaasPanel\Tests\Models\TeamInvitation;
use TomatoPHP\FilamentSaasPanel\Tests\Models\User;

#[WithEnv('DB_CONNECTION', 'testing')]
abstract class TestCase extends BaseTestCase
{
    use LazilyRefreshDatabase;
    use WithWorkbench;

    public ?Panel $panel;

    protected function setUp(): void
    {
        parent::setUp();
        $this->panel = Filament::getCurrentOrDefaultPanel();

        Jetstream::useUserModel(config('filament-saas-panel.user_model'));
        Jetstream::useTeamModel(config('filament-saas-panel.team_model'));
        Jetstream::useMembershipModel(config('filament-saas-panel.membership_model'));
        Jetstream::useTeamInvitationModel(config('filament-saas-panel.team_invitation_model'));
    }

    protected function getPackageProviders($app): array
    {
        $providers = [
            ActionsServiceProvider::class,
            BladeCaptureDirectiveServiceProvider::class,
            BladeHeroiconsServiceProvider::class,
            BladeIconsServiceProvider::class,
            FilamentServiceProvider::class,
            FormsServiceProvider::class,
            InfolistsServiceProvider::class,
            LivewireServiceProvider::class,
            NotificationsServiceProvider::class,
            SupportServiceProvider::class,
            SchemasServiceProvider::class,
            TablesServiceProvider::class,
            WidgetsServiceProvider::class,
            MediaLibraryServiceProvider::class,
            JetstreamServiceProvider::class,
            FortifyServiceProvider::class,
            FilamentSaasPanelServiceProvider::class,
            AppPanelProvider::class,
            AdminPanelProvider::class,
        ];

        sort($providers);

        return $providers;
    }

    protected function defineDatabaseMigrations(): void
    {
        $this->loadMigrationsFrom(__DIR__.'/../database/migrations');
    }

    public function getEnvironmentSetUp($app): void
    {
        $app['config']->set('database.default', 'testing');
        $app['config']->set('auth.guards.testing.driver', 'session');
        $app['config']->set('auth.guards.testing.provider', 'testing');
        $app['config']->set('auth.providers.testing.driver', 'eloquent');
        $app['config']->set('auth.providers.testing.model', User::class);
        $app['config']->set('filament-saas-panel.user_model', User::class);
        $app['config']->set('filament-saas-panel.team_model', Team::class);
        $app['config']->set('filament-saas-panel.membership_model', Membership::class);
        $app['config']->set('filament-saas-panel.team_invitation_model', TeamInvitation::class);

        $app['config']->set('view.paths', [
            ...$app['config']->get('view.paths'),
            __DIR__.'/../resources/views',
        ]);
    }
}
</file>

</files>
